<?xml version="1.0" encoding="utf-8"?>
<this:Process this:BuildSettings="[New Microsoft.TeamFoundation.Build.Workflow.Activities.BuildSettings()]" this:TestSpecs="[New Microsoft.TeamFoundation.Build.Workflow.Activities.TestSpecList(New Microsoft.TeamFoundation.Build.Workflow.Activities.AgileTestPlatformSpec(&quot;**\*test*.dll&quot;))]" this:BuildNumberFormat="[&quot;$(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.r)&quot;]" this:SolutionSpecificBuildOutputs="[False]" this:CleanWorkspace="[Microsoft.TeamFoundation.Build.Workflow.Activities.CleanWorkspaceOption.All]" this:RunCodeAnalysis="[Microsoft.TeamFoundation.Build.Workflow.Activities.CodeAnalysisOption.AsConfigured]" this:SourceAndSymbolServerSettings="[New Microsoft.TeamFoundation.Build.Workflow.Activities.SourceAndSymbolServerSettings(True, Nothing)]" this:AgentSettings="[New Microsoft.TeamFoundation.Build.Workflow.Activities.AgentSettings() With {.MaxWaitTime = New System.TimeSpan(4, 0, 0), .MaxExecutionTime = New System.TimeSpan(0, 0, 0), .TagComparison = Microsoft.TeamFoundation.Build.Workflow.Activities.TagComparison.MatchExactly }]" this:AssociateChangesetsAndWorkItems="[True]" this:CreateWorkItem="[True]" this:MSBuildPlatform="[Microsoft.TeamFoundation.Build.Workflow.Activities.ToolPlatform.Auto]" this:MSBuildMultiProc="[True]" this:PerformTestImpactAnalysis="[True]" this:CreateLabel="[True]" this:DisableTests="[False]" this:Verbosity="[Microsoft.TeamFoundation.Build.Workflow.BuildVerbosity.Normal]" this:SupportedReasons="All" this:EmailFrom="CM-OnePlatform@rd.allscripts.com" this:SilverLightTest="False" this:OnStylecopViolationFailBuild="True" this:GenerateNuget="False" this:canFortify="False" this:ZipNugetPackages="False" this:SendEmail="False" this:FilesToObfuscate="[New String() {}]" this:Sonar="False" this:ANTBuild="False" this:ForceCreateVersion="True" this:DoCheckinAssemblyInfoFiles="False" this:AssemblyInfoFilePattern="AssemblyInfo.*" this:BuildCheckinWorkItem="1558756" this:TfsCollection="http://alm-prod-app1.rd.allscripts.com:8080/tfs/boc_projects" this:PublishNugetToRepository="False" this:NugetAPIkey="Allscripts#1" this:UpdateAssemblyVersion="True" this:StrongNaming="False" this:StrongNamePvtKey="[CustomDropDownList.StrongNameKeys.Allscripts]" this:VersionInfoFilePattern="HVCVersionInfo.h" this:CppVersion="False" this:Build_Type="[CustomDropDownList.BuildType.alpha]" this:AutoDeploy="False" this:BuildDropBasePath="\\rdsan\CM\Builds\CommonComponents" this:EnableDownstreamBuild="False" this:RunDownstreamBuildsInParallel="True" this:PerformStylecopScan="True" this:ExcludeObjFromFortify="False" this:MSBuildToolsVersion="True" this:DigitalCodeSignAll="False" this:CheckinNotification="False" this:MSBuildVersionToBeUsed="[CustomDropDownList.MSBuildVersion.Four]" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:b="clr-namespace:BuildMatricsDBConnector;assembly=BuildMatricsDBConnector" xmlns:ba="clr-namespace:BuildActivities.Activities;assembly=BuildActivities" xmlns:c="clr-namespace:CustomDropDownList;assembly=CustomDropDownList" xmlns:ca="clr-namespace:CheckinFiles.Activities;assembly=CheckinFiles" xmlns:h="clr-namespace:httpRequestTest;assembly=httpRequest" xmlns:i="clr-namespace:ISTBuildActivityLibrary;assembly=ISTBuildActivityLibrary" xmlns:local="clr-namespace:;assembly=BuildActivity" xmlns:local1="clr-namespace:;assembly=EmailActivity" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mt="clr-namespace:Microsoft.TeamFoundation;assembly=Microsoft.TeamFoundation.Common, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbc="clr-namespace:Microsoft.TeamFoundation.Build.Client;assembly=Microsoft.TeamFoundation.Build.Client" xmlns:mtbc1="clr-namespace:Microsoft.TeamFoundation.Build.Client;assembly=Microsoft.TeamFoundation.Build.Client, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbc2="clr-namespace:Microsoft.TeamFoundation.Build.Controls;assembly=Microsoft.TeamFoundation.Build.Controls" xmlns:mtbw="clr-namespace:Microsoft.TeamFoundation.Build.Workflow;assembly=Microsoft.TeamFoundation.Build.Workflow" xmlns:mtbw1="clr-namespace:Microsoft.TeamFoundation.Build.Workflow;assembly=Microsoft.TeamFoundation.Build.Workflow, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbwa="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Activities;assembly=Microsoft.TeamFoundation.Build.Workflow" xmlns:mtbwa1="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Activities;assembly=Microsoft.TeamFoundation.Build.Workflow, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbwe="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Expressions;assembly=Microsoft.TeamFoundation.Build.Workflow, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbwe1="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Expressions;assembly=Microsoft.TeamFoundation.Build.Workflow" xmlns:mtbwt="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Tracking;assembly=Microsoft.TeamFoundation.Build.Workflow, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtbwt1="clr-namespace:Microsoft.TeamFoundation.Build.Workflow.Tracking;assembly=Microsoft.TeamFoundation.Build.Workflow" xmlns:mtc="clr-namespace:Microsoft.TeamFoundation.Client;assembly=Microsoft.TeamFoundation.Client, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtc1="clr-namespace:Microsoft.TeamFoundation.Client;assembly=Microsoft.TeamFoundation.Client" xmlns:mtcwc="clr-namespace:Microsoft.TeamFoundation.Controls.WPF.Converters;assembly=Microsoft.TeamFoundation.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mttbb="clr-namespace:Microsoft.TeamFoundation.TestImpact.BuildIntegration.BuildActivities;assembly=Microsoft.TeamFoundation.TestImpact.BuildIntegration, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mttbb1="clr-namespace:Microsoft.TeamFoundation.TestImpact.BuildIntegration.BuildActivities;assembly=Microsoft.TeamFoundation.TestImpact.BuildIntegration" xmlns:mtvc="clr-namespace:Microsoft.TeamFoundation.VersionControl.Client;assembly=Microsoft.TeamFoundation.VersionControl.Client" xmlns:mtvc1="clr-namespace:Microsoft.TeamFoundation.VersionControl.Common;assembly=Microsoft.TeamFoundation.VersionControl.Common" xmlns:mtvc2="clr-namespace:Microsoft.TeamFoundation.VersionControl.Client;assembly=Microsoft.TeamFoundation.VersionControl.Client, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" xmlns:mtvc3="clr-namespace:Microsoft.TeamFoundation.VersionControl.Client;assembly=Microsoft.TeamFoundation.VersionControl.Controls" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:mvc="clr-namespace:Microsoft.VisualBasic.CompilerServices;assembly=Microsoft.VisualBasic" xmlns:mw="clr-namespace:Microsoft.Win32;assembly=mscorlib" xmlns:n="clr-namespace:NupkgDeletion;assembly=NupkgDeletion" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:s1="clr-namespace:System;assembly=System.Core" xmlns:s10="clr-namespace:System;assembly=System" xmlns:s2="clr-namespace:System;assembly=System.ComponentModel.Composition" xmlns:s3="clr-namespace:System;assembly=System.ServiceModel" xmlns:s4="clr-namespace:System;assembly=Microsoft.VisualStudio.Platform.VSEditor" xmlns:s5="clr-namespace:System;assembly=System.Numerics" xmlns:s6="clr-namespace:System;assembly=System.DirectoryServices" xmlns:s7="clr-namespace:System;assembly=System.Configuration.Install" xmlns:s8="clr-namespace:SqlCommandsExecution;assembly=SqlCommandsExecution" xmlns:s9="clr-namespace:System;assembly=StyleCop" xmlns:sa="clr-namespace:System.Activities;assembly=System.Activities" xmlns:sad="clr-namespace:System.Activities.Debugger;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=mscorlib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:scg1="clr-namespace:System.Collections.Generic;assembly=System.ServiceModel" xmlns:scg2="clr-namespace:System.Collections.Generic;assembly=System.Core" xmlns:scg3="clr-namespace:System.Collections.Generic;assembly=System" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System" xmlns:sco1="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:sdc="clr-namespace:System.Data.Common;assembly=System.Data" xmlns:sds="clr-namespace:System.Data.SqlClient;assembly=System.Data" xmlns:si="clr-namespace:System.IO;assembly=System.ServiceModel" xmlns:si1="clr-namespace:System.IO;assembly=WindowsBase" xmlns:si2="clr-namespace:System.IO;assembly=System.Core" xmlns:si3="clr-namespace:System.IO;assembly=System" xmlns:si4="clr-namespace:System.IO;assembly=mscorlib" xmlns:sl="clr-namespace:System.Linq;assembly=System.Core" xmlns:sma="clr-namespace:System.Management.Automation;assembly=System.Management.Automation" xmlns:sr="clr-namespace:System.Reflection;assembly=System" xmlns:sr1="clr-namespace:System.Reflection;assembly=mscorlib" xmlns:str="clr-namespace:System.Text.RegularExpressions;assembly=System" xmlns:swu="clr-namespace:System.Web.UI;assembly=System.Web" xmlns:swuw="clr-namespace:System.Web.UI.WebControls;assembly=System.Web" xmlns:sx="clr-namespace:System.Xaml;assembly=System.Xaml" xmlns:sx1="clr-namespace:System.Xml;assembly=System.Data" xmlns:sx2="clr-namespace:System.Xml;assembly=System.Runtime.Serialization" xmlns:sx3="clr-namespace:System.Xml;assembly=System.Xml" xmlns:sxx="clr-namespace:System.Xml.XPath;assembly=System.Xml.Linq" xmlns:sxx1="clr-namespace:System.Xml.XPath;assembly=System.Xml" xmlns:tac="clr-namespace:TfsBuildExtensions.Activities.Communication;assembly=TfsBuildExtensions.Activities" xmlns:tac1="clr-namespace:TfsBuildExtensions.Activities.CodeQuality;assembly=TfsBuildExtensions.Activities.StyleCop" xmlns:tac2="clr-namespace:TfsBuildExtensions.Activities.Compression;assembly=TfsBuildExtensions.Activities" xmlns:taf="clr-namespace:TfsBuildExtensions.Activities.FileSystem;assembly=TfsBuildExtensions.Activities" xmlns:taf1="clr-namespace:TfsBuildExtensions.Activities.Framework;assembly=TfsBuildExtensions.Activities" xmlns:tas="clr-namespace:TfsBuildExtensions.Activities.Scripting;assembly=TfsBuildExtensions.Activities" xmlns:tat="clr-namespace:TfsBuildExtensions.Activities.TeamFoundationServer;assembly=TfsBuildExtensions.Activities" xmlns:tax="clr-namespace:TfsBuildExtensions.Activities.Xml;assembly=TfsBuildExtensions.Activities" xmlns:this="clr-namespace:TfsBuild;assembly=ActivityLibrary1" xmlns:tva="clr-namespace:TfsBuild.Versioning.Activities;assembly=TfsBuild.Versioning.Activities" xmlns:u="clr-namespace:UpdateReleaseBuildPortal;assembly=UpdateReleaseBuildPortal" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <this:Process.MSBuildArguments>
    <InArgument x:TypeArguments="x:String" />
  </this:Process.MSBuildArguments>
  <this:Process.GetVersion>
    <InArgument x:TypeArguments="x:String" />
  </this:Process.GetVersion>
  <this:Process.Metadata>
    <mtbw:ProcessParameterMetadataCollection>
      <mtbw:ProcessParameterMetadata Category="#300 Advanced" Description="Enable MSBuid Multi-proc to build your solutions' projects in parallel, when possible, using all available processors on the build server." DisplayName="MSBuild Multi-Proc" ParameterName="MSBuildMultiProc" /> <mtbw:ProcessParameterMetadata Category="#300 Advanced" Description="True will put build outputs into folders based on the solution name. False will put all build outputs into the same folder." DisplayName="Solution Specific Build Outputs" ParameterName="SolutionSpecificBuildOutputs" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Email Parameters" DisplayName="Email From" ParameterName="EmailFrom" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Email Parameters" DisplayName="Email To" ParameterName="EmailTo" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="SilverLight" DisplayName="Run SilverLight Test" ParameterName="SilverLightTest" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="NuGet" DisplayName="Generate Nuget Package" ParameterName="GenerateNuget" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="#300 Advanced" Description="This is the name that will be used by Build Process for naming convention" DisplayName="Project/Component Name" ParameterName="BinariesDirSubFolder" Required="True" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Never" Category="#300 Advanced" DisplayName="Fail Build On Stylecop Violations" ParameterName="OnStylecopViolationFailBuild" /> <mtbw:ProcessParameterMetadata Category="NuGet" Description="Provide the path path of the nuspec file from the root level of the Project" DisplayName="Nuspec Files List - Without Symbol" ParameterName="NuspecList" /> <mtbw:ProcessParameterMetadata Category="NuGet" DisplayName="Nuget Output Folder" ParameterName="NugetPackages" /> <mtbw:ProcessParameterMetadata Category="NuGet" DisplayName="Nuspec Files List - With Symbol" ParameterName="NuspecListSymbol" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Fortify" DisplayName="Enable Fortify Scan" ParameterName="canFortify" /> <mtbw:ProcessParameterMetadata Category="Fortify" DisplayName="Fortify Shared Directory" ParameterName="FortifySharedDir" /> <mtbw:ProcessParameterMetadata Category="Fortify" DisplayName="Fortify Jenkins URL With API Token" ParameterName="FortifyURL" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="NuGet" DisplayName="Zip Nuget Packages" ParameterName="ZipNugetPackages" /> <mtbw:ProcessParameterMetadata Category="Email Parameters" DisplayName="Build Completion Email" ParameterName="SendEmail" /> <mtbw:ProcessParameterMetadata Category="SilverLight" DisplayName="Silverlight Tests Xap Files" ParameterName="SilverlightTestsXaps" /> <mtbw:ProcessParameterMetadata Category="Project Specific Build Activities" Description="Specify the MSBuild proj/target path of the file in TFS server.&#xA;For example: $/OurTeam/Build/PreBuild.proj" DisplayName="Pre-Build Projects" ParameterName="PreBuildProjects" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Additional Features" Description="Enter the patterns of the DLL names which have to be obfusctaed" DisplayName="Obfuscation - Assembly Patterns To Obfuscate" ParameterName="FilesToObfuscate" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Additional Features" Description="Enable this option to apply digital code signature on all files getting created as part of compilation" DisplayName="Enable Digital Code Signing" ParameterName="DigitalCodeSignAll" /> <mtbw:ProcessParameterMetadata Category="Stylecop" DisplayName="Date When The Builds Will Start Failing On StyleCop Violations" ParameterName="StylecopFailureStartDate" Required="True" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Additional Features" DisplayName="Trigger Sonar Job" ParameterName="Sonar" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="JAVA-ANT Build" DisplayName="Enable JAVA-ANT Build" ParameterName="ANTBuild" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="JAVA-ANT Build" Description="The path should start after the value given in &quot;Source Control Folder&quot; field of &quot;Workspace&quot; tab in Build Definition." DisplayName="Path to ANT build.xml file" ParameterName="antbuildfile" /> <mtbw:ProcessParameterMetadata Category="Build Versioning" Description="This is the pattern used to find the AssemblyInfo files.  Generally, you shouldn't need to change this value." DisplayName="AssemblyInfo File Pattern" ParameterName="AssemblyInfoFilePattern" Required="True" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Build Versioning" Description="Indicated whether the AssemblyInfo files should be checked back into source control after they are modified." DisplayName="Perform Check-in of the AssemblyInfo Files" ParameterName="DoCheckinAssemblyInfoFiles" /> <mtbw:ProcessParameterMetadata Category="Build Versioning" Description="If true, the versioning process will create AssemblyVersion or AssemblyFileVersion values even if they do not already exist." DisplayName="Force Create Version" ParameterName="ForceCreateVersion" /> <mtbw:ProcessParameterMetadata Category="Build Versioning" Description="TFS path location for the seed (xml) file containing the Assembly Version and Assembly File Version values." DisplayName="Version Seed File Path" ParameterName="VersionSeedFilePath" Required="True" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Build Versioning" DisplayName="WorkItem Number To Associate With Build Checkin" ParameterName="BuildCheckinWorkItem" /> <mtbw:ProcessParameterMetadata Category="Build Versioning" DisplayName="TFS Collection" ParameterName="TfsCollection" /> <mtbw:ProcessParameterMetadata Category="Build Versioning" Description="TFS path location for the version reference (xml) file build's major, minor, patch and revision values details." DisplayName="VersionReferenceFilePath" ParameterName="VersionReferenceFilePath" Required="True" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="NuGet" DisplayName="Publish Nuget Packages To Repository" ParameterName="PublishNugetToRepository" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Never" Category="NuGet" DisplayName="Nuget Repository API key" ParameterName="NugetAPIkey" /> <mtbw:ProcessParameterMetadata Category="Build Versioning" Description="Choose True if AssemblyVersion need be updated with build number - AssemblyFileVersion always gets updated" DisplayName="UpdateAssemblyVersion" ParameterName="UpdateAssemblyVersion" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Strong Naming" DisplayName="Enable Strong Naming of Assemblies" ParameterName="StrongNaming" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Strong Naming" Description="Enter the file pattern 'One Per Line'" DisplayName="File Pattern To Be Strong Named" ParameterName="StrongNameFiles" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Strong Naming" Description="Path to 'Private Key' location. Should be a relative path after the value as given in 'Source Control Folder' in Workspace Tab." DisplayName="Path to 'Private Key'" ParameterName="StrongNamePvtKey" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="C++ DLLs Versioning" DisplayName="Update AssemblyVersion Of C++ DLLs" ParameterName="UpdateCppAssemblyVersion" /> <mtbw:ProcessParameterMetadata Category="C++ DLLs Versioning" DisplayName="VersionInfo Files Pattern" ParameterName="VersionInfoFilePattern" /> <mtbw:ProcessParameterMetadata Category="C++ DLLs Versioning" DisplayName="Enable Versioning Of C++ DLLs" ParameterName="CppVersion" /> <mtbw:ProcessParameterMetadata Category="Fortify" Description="Enter the folders which should not be fortify scanned with their path relative to the build workspace path" DisplayName="List Of Folders Not To Be Fortify Scanned" ParameterName="FortifyExemptList" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="#200 Basic" Description="Select &quot;alpha&quot; for builds on Development branches, &quot;beta&quot; for builds on Main branch, &quot;rc&quot; for release candidates builds on Release branch and &quot;Release&quot; for Release builds on Release branch" DisplayName="Type Of The Build" ParameterName="Build_Type" /> <mtbw:ProcessParameterMetadata Category="Stylecop" Description="Enter the full path of the custom stylecop settings (rulesets) file, if you do not wish to use the settings file available on the build machines." DisplayName="Custom Stylecop Settings File Path" ParameterName="CustomStylecopSettingsPath" /> <mtbw:ProcessParameterMetadata Category="Project Specific Build Activities" Description="Specify the MSBuild proj/target path of the file in TFS server.&#xA;For example: $/OurTeam/Build/PostBuild.proj" DisplayName="Post-Build Projects" ParameterName="PostBuildProjects" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Auto Deployment" Description="If there are multiple deployment stages, provide the stage tag upto which the deployment should happen in staged manner." DisplayName="Deployment Target Stage" ParameterName="DeploymentTargetStage" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Auto Deployment" Description="Select True for Auto Deployment. Please check with Common Components Build Team whether Auto Deployment has been configured for this Build Definition." DisplayName="Enable Auto Deployment" ParameterName="AutoDeploy" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="#200 Basic" DisplayName="Build Drop Base Path" ParameterName="BuildDropBasePath" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Downstream Build Chaining" DisplayName="Enable Downstream Build" ParameterName="EnableDownstreamBuild" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Downstream Build Chaining" DisplayName="Downstream Build Definition" ParameterName="DownstreamBuildDefinition" /> <mtbw:ProcessParameterMetadata Category="Downstream Build Chaining" DisplayName="Downstream BuildDefinition TeamProject" ParameterName="DownstreamBuildDefinitionTeamProject" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Downstream Build Chaining" DisplayName="Run Downstream Builds In Parallel" ParameterName="RunDownstreamBuildsInParallel" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Auto Deployment" DisplayName="Downstream Deployment Build Definition Name" ParameterName="CommonDeploymentBuildDefinition" /> <mtbw:ProcessParameterMetadata Category="Strong Naming" Description="Provide the path of the third party assemblies from the root level of the project that are all required to be strong named. Please ensure we have approval from the third party vendor to strong name their assemblies" DisplayName="List of Third Parties Files To Be Strong Named" ParameterName="StrongNameThirdPartyFiles" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Additional Features" Description="Provide the path of the Non-Compiled files (.ps1,.target and .bat) from the root level of the project that are all required to be digitally signed." DisplayName="Code Signing - List of Non-Compiled Files To Be Digitally Signed" ParameterName="DigitalSignThirdPartyFiles" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Never" Category="Additional Features" Description="Pass the Json file path having settings to run test cases for Javascript using Chutzpah. Pass in the server path from the root of the project. " DisplayName="Javascript settings file" ParameterName="JavaScriptJsonFilePath" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Never" Category="Stylecop" Description="Specify the projects that should be excluded from StyleCop scan. The projects should be semicolon seprated. Ex- ProjA;ProjB" DisplayName="StyleCop Exclusion Projects" ParameterName="StyleCopExclusionProjects" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Stylecop" DisplayName="Enable Stylecop" ParameterName="PerformStylecopScan" /> <mtbw:ProcessParameterMetadata Category="Project Specific Build Activities" DisplayName="Post-Build MSBuild Arguments" ParameterName="PostMSBuildArguments" /> <mtbw:ProcessParameterMetadata Category="Project Specific Build Activities" DisplayName="Pre-Build MSBuild Arguments" ParameterName="PreMSBuildArguments" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Fortify" Description="Enable this option to exclude Obj folder from Fortify scan" DisplayName="Exclude Obj folder from fortify scan" ParameterName="ExcludeObjFromFortify" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="Advanced" DisplayName="List of folders to copy to drop location" ParameterName="CustomizedDropList" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Never" Category="#300 Advanced" Description="Choose True for MSBuild 4.0(Compatible with VS2012) and False for 12.0(Compatible with VS2013)" DisplayName="Use MSBuild 4.0 Version" ParameterName="MSBuildToolsVersion" /> <mtbw:ProcessParameterMetadata BrowsableWhen="Always" Category="#300 Advanced" DisplayName="MSBuildVersionToBeUsed" ParameterName="MSBuildVersionToBeUsed" /></mtbw:ProcessParameterMetadataCollection>
  </this:Process.Metadata>
  <mva:VisualBasic.Settings>Assembly references and imported namespaces serialized as XML namespaces</mva:VisualBasic.Settings>
  <this:Process.Implementation>
    <Sequence mtbwt1:BuildTrackingParticipant.Importance="None">
      <Sequence.Variables>
        <Variable x:TypeArguments="mtbc:IBuildDetail" Name="BuildDetail" />
        <Variable x:TypeArguments="x:String" Name="DropLocation" />
        <Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="CsProjects" />
        <Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="WixProjects" />
        <Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="VcxProjects" />
        <Variable x:TypeArguments="x:String" Name="messageContainer" />
      </Sequence.Variables>
      <mtbwa:GetBuildDetail DisplayName="Get the Build" mtbwt1:BuildTrackingParticipant.Importance="Low" Result="[BuildDetail]" />
      <mtbwa:InvokeForReason DisplayName="Update Build Number for Triggered Builds" Reason="Triggered">
        <mtbwa:UpdateBuildNumber BuildNumberFormat="[BuildNumberFormat]" DisplayName="Update Build Number" />
      </mtbwa:InvokeForReason>
      <mtbwa:AgentScope DataToIgnore="" DisplayName="Run On Agent" MaxExecutionTime="[AgentSettings.MaxExecutionTime]" MaxWaitTime="[AgentSettings.MaxWaitTime]" ReservationSpec="[AgentSettings.GetAgentReservationSpec()]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces">
        <mtbwa:AgentScope.Variables>
          <Variable x:TypeArguments="mtbc:IBuildAgent" Name="BuildAgent" /> <Variable x:TypeArguments="mtvc:Workspace" Name="Workspace" /> <Variable x:TypeArguments="x:String" Name="BuildDirectory" /> <Variable x:TypeArguments="x:String" Default="[BuildDetail.BuildNumber]" Name="LabelName" /> <Variable x:TypeArguments="x:String" Name="WorkspaceName" /> <Variable x:TypeArguments="x:String" Name="SourcesDirectory" /> <Variable x:TypeArguments="x:String" Name="BinariesDirectory" /> <Variable x:TypeArguments="x:String" Name="TestResultsDirectory" /> <Variable x:TypeArguments="x:String" Default="TestResult.trx" Name="TestResultFile" /> <Variable x:TypeArguments="x:Int32" Name="StatLightExitCode" /> <Variable x:TypeArguments="scg:IList(mtvc:Changeset)" Default="[New List(Of Changeset)]" Name="TempAssociatedChangesets" /> <Variable x:TypeArguments="x:String" Default="[&quot;&quot;&quot;&quot; + DropLocation + &quot;\GenericTestReport.trx&quot; + &quot;&quot;&quot;&quot;]" Name="GenericReportFile" /> <Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="ChmFiles" /> <Variable x:TypeArguments="x:String" Name="localPreBuildProject" /> <Variable x:TypeArguments="x:String" Name="MajorVersion" /> <Variable x:TypeArguments="x:String" Name="MinorVersion" /> <Variable x:TypeArguments="x:String" Name="PatchVersion" /> <Variable x:TypeArguments="x:String" Name="BuildRevision" /> <Variable x:TypeArguments="x:String" Name="IncrementedBuildRevision" /> <Variable x:TypeArguments="x:String" Name="PaddedBuildRevision" /> <Variable x:TypeArguments="x:String" Name="BuildVersion" /> <Variable x:TypeArguments="x:Boolean" Default="True" Name="UseVersionSeedFile" /> <Variable x:TypeArguments="x:String" Name="VersionSeedLocalPath" /> <Variable x:TypeArguments="x:String" Name="VersionReferenceLocalPath" /> <Variable x:TypeArguments="x:String" Name="localProject" /> <Variable x:TypeArguments="x:String" Default="prerelease" Name="NugetRepositoryURL" /> <Variable x:TypeArguments="x:Int32" Default="1" Name="ViolationsXmlCount" /> <Variable x:TypeArguments="x:Boolean" Default="False" Name="StyleCopFailFlag" /> <Variable x:TypeArguments="x:Int32" Default="0" Name="TotalStylecopViolationsCount" /> <Variable x:TypeArguments="x:String" Default="Dev" Name="BuildBranchType" /> <Variable x:TypeArguments="x:String" Name="BuildDropLatestFoldersRootPath" /> <Variable x:TypeArguments="x:String" Name="CompileOutputXml" /> <Variable x:TypeArguments="x:String" Default="C:\Software\CompiledOutputList\CompiledOutputList.exe" Name="CompiledOutputListExe" /> <Variable x:TypeArguments="x:Boolean" Default="False" Name="CompiledItemExistsInCollection" /> <Variable x:TypeArguments="scg:ICollection(x:String)" Default="[New List(Of String)]" Name="CompiledOutputListCollection" /> <Variable x:TypeArguments="mtbc:IQueuedBuild" Name="DownstreamBuildResult" /> <Variable x:TypeArguments="mtbc:IBuildDefinition" Name="DownstreamBuildDefn" /> <Variable x:TypeArguments="x:String" Name="TFSBuildExeOutput" /> <Variable x:TypeArguments="x:String" Name="MSBuildStrongNamePatterns"><Variable.Default><Literal x:TypeArguments="x:String" Value="" /></Variable.Default></Variable> <Variable x:TypeArguments="x:String" Name="MSBuildObfuscatePatterns"><Variable.Default><Literal x:TypeArguments="x:String" Value="" /></Variable.Default></Variable> <Variable x:TypeArguments="x:Boolean" Name="ThirdPartyStrongNameExists" /> <Variable x:TypeArguments="x:Int32" Default="0" Name="TotalFxCopErrorsCount" /> <Variable x:TypeArguments="x:String" Name="AdditionalMSBuildArguments" /> <Variable x:TypeArguments="x:Boolean" Name="UnitTestsCheck" /> <Variable x:TypeArguments="x:Int32" Default="0" Name="TotalFxCopCriticalErrorsCount" /> <Variable x:TypeArguments="x:String" Name="SemanticBuildVersion" /> <Variable x:TypeArguments="x:Boolean" Name="ThirdPartyDigitalSignExists" /> <Variable x:TypeArguments="mtc1:TfsTeamProjectCollection" Name="TfsCollectionVar" /> <Variable x:TypeArguments="x:String" Name="NugetVersionToBeUsed" /> <Variable x:TypeArguments="x:Boolean" Default="False" Name="CustomizedDropListExists" /> <Variable x:TypeArguments="x:Int32" Name="WorkspaceMappingCheckExitCode" /> <Variable x:TypeArguments="x:String" Default="C:\Software\DscScripts" Name="DSCSourceDir" /> <Variable x:TypeArguments="x:String" Default="\\rdsan\CM\Builds\CommonComponents\EmailTemplate.htm" Name="EmailTemplate" /> <Variable x:TypeArguments="x:String" Default="relay.corp.allscripts.com" Name="SmtpServer" /> <Variable x:TypeArguments="mtvc:Changeset" Name="FinalChangeset" /> <Variable x:TypeArguments="x:String" Default="C:\SOFTWARE\ChangesTracker\ChangesTracker.exe" Name="ChangesTrackerTool" /> <Variable x:TypeArguments="x:String" Name="FilesListRequiringCheckinNotification" /> <Variable x:TypeArguments="x:String" Name="MSBuildToolsPath"><Variable.Default><Literal x:TypeArguments="x:String" Value="" /></Variable.Default></Variable></mtbwa:AgentScope.Variables>
        <Sequence DisplayName="Initialize Variables" mtbwt1:BuildTrackingParticipant.Importance="Low">
          <mtbwa:GetBuildAgent DisplayName="Get the Agent" mtbwt1:BuildTrackingParticipant.Importance="Low" Result="[BuildAgent]" />
          <mtbwa:GetBuildDirectory DisplayName="Get the Build Directory" mtbwt1:BuildTrackingParticipant.Importance="Low" Result="[BuildDirectory]" />
          <Assign x:TypeArguments="x:String" DisplayName="Initialize Workspace Name" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[WorkspaceName]" Value="[String.Format(&quot;{0}_{1}_{2}&quot;, BuildDetail.BuildDefinition.Id, Microsoft.TeamFoundation.LinkingUtilities.DecodeUri(BuildAgent.Uri.AbsoluteUri).ToolSpecificId, BuildAgent.ServiceHost.Name)]" />
          <Assign x:TypeArguments="x:String" DisplayName="Initialize Sources Directory" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[SourcesDirectory]" Value="[String.Format(&quot;{0}\Sources&quot;, BuildDirectory)]" />
          <Assign x:TypeArguments="x:String" DisplayName="Initialize Binaries Directory" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[BinariesDirectory]" Value="[String.Format(&quot;{0}\Binaries&quot;, BuildDirectory)]" />
          <Assign x:TypeArguments="x:String" DisplayName="Initialize TestResults Directory" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[TestResultsDirectory]" Value="[String.Format(&quot;{0}\TestResults&quot;, BuildDirectory)]" />
          <mtbwa:WriteCustomSummaryInformation DisplayName="Write The Agent Name, Build Server and Build Directory On The Build Summary Dashboard" Message="[&quot;This build was triggered on&quot; + Environment.NewLine +&#xA;&quot;Server: &quot; + Environment.MachineName.ToLower() + Environment.NewLine +&#xA;&quot;Agent: &quot; + BuildAgent.Name + Environment.NewLine +&#xA;&quot;Build Directory: &quot; + BuildDirectory]" SectionDisplayName="Request Summary" SectionKey="CheckInOutcome" SectionPriority="150" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" />
          <If Condition="[Not BuildSettings.HasPlatformConfigurations]" DisplayName="If Not BuildSettings.HasPlatformConfigurations" mtbwt1:BuildTrackingParticipant.Importance="Low">
            <If.Then>
              <AddToCollection x:TypeArguments="mtbwa:PlatformConfiguration" Collection="[BuildSettings.PlatformConfigurations]" DisplayName="Use Default Platform Configuration" mtbwt1:BuildTrackingParticipant.Importance="Low" Item="[Microsoft.TeamFoundation.Build.Workflow.Activities.PlatformConfiguration.Default]" />
            </If.Then>
          </If>
          <If Condition="[WorkspaceName.Length &gt; Microsoft.TeamFoundation.VersionControl.Common.RepositoryConstants.MaxWorkspaceNameSize]" DisplayName="If WorkspaceName &gt; MaxSize" mtbwt1:BuildTrackingParticipant.Importance="Low">
            <If.Then>
              <Sequence mtbwt1:BuildTrackingParticipant.Importance="None">
                <mtbwa:WriteBuildWarning DisplayName="Write Workspace Size Warning" Message="[String.Format(&quot;The workspace name '{0}' exceeds the maximum allowed limit of '{1}' characters. Truncating it to match the maximum limit.&quot;, WorkspaceName, Microsoft.TeamFoundation.VersionControl.Common.RepositoryConstants.MaxWorkspaceNameSize)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" />
                <Assign x:TypeArguments="x:String" DisplayName="Truncate WorkspaceName to MaxSize" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[WorkspaceName]" Value="[WorkspaceName.Substring(0, Microsoft.TeamFoundation.VersionControl.Common.RepositoryConstants.MaxWorkspaceNameSize).TrimEnd()]" />
              </Sequence>
            </If.Then>
          </If>
        </Sequence> <Sequence DisplayName="Initialize Workspace" mtbwt1:BuildTrackingParticipant.Importance="Low"><mtbwa:DeleteDirectory Directory="[TestResultsDirectory]" DisplayName="Delete Test Results Directory" mtbwt1:BuildTrackingParticipant.Importance="Low" Recursive="[True]" /><If Condition="[Not CleanWorkspace = Microsoft.TeamFoundation.Build.Workflow.Activities.CleanWorkspaceOption.None]" DisplayName="If Not CleanWorkspace = CleanWorkspaceOption.None" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:DeleteDirectory Directory="[BinariesDirectory]" DisplayName="Delete Binaries Directory" mtbwt1:BuildTrackingParticipant.Importance="Low" /></If.Then></If><If Condition="[CleanWorkspace = Microsoft.TeamFoundation.Build.Workflow.Activities.CleanWorkspaceOption.All]" DisplayName="If CleanWorkspace = CleanWorkspaceOption.All" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Sequence DisplayName="Delete Workspace and Sources Directory" mtbwt1:BuildTrackingParticipant.Importance="Low"><mtbwa:DeleteWorkspace DeleteLocalItems="[True]" DisplayName="Delete Workspace" mtbwt1:BuildTrackingParticipant.Importance="Low" Name="[WorkspaceName]" /><mtbwa:DeleteDirectory Directory="[SourcesDirectory]" DisplayName="Delete Sources Directory" mtbwt1:BuildTrackingParticipant.Importance="Low" /></Sequence></If.Then></If><mtbwa:CreateWorkspace BuildDirectory="[BuildDirectory]" Comment="[&quot;Workspace Created by Team Build&quot;]" DisplayName="Create Workspace" Name="[WorkspaceName]" Result="[Workspace]" SourcesDirectory="[SourcesDirectory]" /><If Condition="[CleanWorkspace = Microsoft.TeamFoundation.Build.Workflow.Activities.CleanWorkspaceOption.Outputs]" DisplayName="If CleanWorkspace = CleanWorkspaceOption.Outputs" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><ForEach x:TypeArguments="mtbwa:PlatformConfiguration" DisplayName="For Each Configuration in BuildSettings.PlatformConfigurations" mtbwt1:BuildTrackingParticipant.Importance="Low" Values="[BuildSettings.PlatformConfigurations]"><ActivityAction x:TypeArguments="mtbwa:PlatformConfiguration"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="mtbwa:PlatformConfiguration" Name="platformConfiguration" /></ActivityAction.Argument><Sequence DisplayName="Clean Configuration"><If Condition="[BuildSettings.HasProjectsToBuild]" DisplayName="If BuildSettings.HasProjectsToBuild" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="For Each Project in BuildSettings.ProjectsToBuild" mtbwt1:BuildTrackingParticipant.Importance="Low" Values="[BuildSettings.ProjectsToBuild]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="serverBuildProjectItem" /></ActivityAction.Argument><Sequence DisplayName="Clean Project" mtbwt1:BuildTrackingParticipant.Importance="Low"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="localBuildProjectItem" /></Sequence.Variables><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Paths to Local Paths" mtbwt1:BuildTrackingParticipant.Importance="Low" Input="[serverBuildProjectItem]" Result="[localBuildProjectItem]" Workspace="[Workspace]" /><If Condition="[System.IO.File.Exists(localBuildProjectItem)]" DisplayName="If File.Exists(Project)" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:MSBuild CommandLineArguments="[String.Format(&quot;/p:SkipInvalidConfigurations=true {0}&quot;, MSBuildArguments)]" Configuration="[platformConfiguration.Configuration]" DisplayName="Run MSBuild for Project" GenerateVSPropsFile="[True]" MaxProcesses="[If (MSBuildMultiProc, 0, 1)]" OutDir="[BinariesDirectory]" Platform="[platformConfiguration.Platform]" Project="[localBuildProjectItem]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" Targets="[New String() { &quot;Clean&quot; }]" TargetsNotLogged="[New String() {&quot;GetNativeManifest&quot;, &quot;GetCopyToOutputDirectoryItems&quot;, &quot;GetTargetPath&quot;}]" ToolPath="[MSBuildToolsPath]" ToolPlatform="[MSBuildPlatform]" Verbosity="[Verbosity]" /></If.Then></If></Sequence></ActivityAction></ForEach></If.Then></If></Sequence></ActivityAction></ForEach></If.Then></If><Sequence DisplayName="Activity when full template is used for gated builds"><If Condition="[System.IO.Path.GetDirectoryName(VersionReferenceFilePath) = System.IO.Path.GetDirectoryName(VersionSeedFilePath)]" DisplayName="Check If VersionRefrence.xml file folder is same as the versionseed.xml file folder "><If.Then><mtbwa:InvokeProcess Arguments="[&quot;workfold /decloak &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionReferenceFilePath) + &quot;&quot;&quot;&quot; + &quot; /workspace:&quot; + Workspace.Name + &quot; /collection:&quot; + TfsCollection]" DisplayName="InvokeProcess to decloak version files folder" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Tfs Cloak message -&gt;&quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then><If.Else><Sequence><mtbwa:InvokeProcess Arguments="[&quot;workfold /decloak &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionReferenceFilePath) + &quot;&quot;&quot;&quot; + &quot; /workspace:&quot; + Workspace.Name + &quot; /collection:&quot; + TfsCollection]" DisplayName="InvokeProcess to decloak VersionReference file folder" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Tfs Cloak message -&gt;&quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:InvokeProcess Arguments="[&quot;workfold /decloak &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionSeedFilePath) + &quot;&quot;&quot;&quot; + &quot; /workspace:&quot; + Workspace.Name + &quot; /collection:&quot; + TfsCollection]" DisplayName="InvokeProcess to decloak VersionSeed file folder" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Tfs Cloak message -&gt;&quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Else></If></Sequence><mtbwa:SyncWorkspace DisplayName="Get Workspace" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" VersionOverride="[GetVersion]" Workspace="[Workspace]"><mtbwa:SyncWorkspace.RequestsFailed><ActivityAction x:TypeArguments="scg:ICollection(mtbc:IQueuedBuild)"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="scg:ICollection(mtbc:IQueuedBuild)" Name="failedRequests" /></ActivityAction.Argument><mtbwa:RetryRequests Behavior="[Microsoft.TeamFoundation.Build.Workflow.Activities.RetryBehavior.DoNotBatch]" DisplayName="Mark Requests for Retry" mtbwt1:BuildTrackingParticipant.Importance="Low" Requests="[failedRequests]" /></ActivityAction></mtbwa:SyncWorkspace.RequestsFailed></mtbwa:SyncWorkspace><Assign DisplayName="Initialize CompileOutputXml"><Assign.To><OutArgument x:TypeArguments="x:String">[CompileOutputXml]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[SourcesDirectory + "\CompileOutput.xml"]</InArgument></Assign.Value></Assign><mtbwa:InvokeProcess Arguments="[&quot;workspaces /collection:&quot; + TfsCollection]" DisplayName="Refresh Workspace" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\tf.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[System.IO.File.Exists(CompileOutputXml)]" DisplayName="Check if CompileOutputXml exists"><If.Then><mtbwa:InvokeProcess Arguments="[&quot;/C DEL /F /Q &quot; + &quot;&quot;&quot;&quot; + CompileOutputXml + &quot;&quot;&quot;&quot;]" DisplayName="Delete CompileOutputXml if it exists" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then></If><mtbwa:InvokeProcess Arguments="[TfsCollection.ToString() + &quot; &quot; + &quot;&quot;&quot;&quot; + BuildDetail.TeamProject + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + BuildDetail.BuildDefinition.Name + &quot;&quot;&quot;&quot;]" DisplayName="Run CheckWorkspaceMapping Utility" FileName="C:\SOFTWARE\CheckWorkspaceMapping\CheckWorkspaceMapping.exe" Result="[WorkspaceMappingCheckExitCode]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[WorkspaceMappingCheckExitCode = 0]" DisplayName="Check WorkspaceMappingCheckExitCode"><If.Then><mtbwa:InvokeProcess Arguments="[String.Format(&quot;{0}{1}{0} {0}{2}{0} {0}{3}{0} {0}{4}{0}&quot;, &quot;&quot;&quot;&quot;, TfsCollection, BuildDetail.TeamProject, BuildDetail.BuildDefinition.Name, SourcesDirectory)]" DisplayName="InvokeProcess for Change Report" FileName="C:\Software\ChangeReport\ChangeReportExe.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteCustomSummaryInformation DisplayName="Change Report" Message="[stdOutput]" SectionDisplayName="Change Report" SectionKey="ChangeReport" SectionPriority="180" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then></If><TryCatch DisplayName="Read and update VersionReference, VersionSeed"><TryCatch.Try><Sequence><InvokeMethod MethodName="RefreshMappings"><InvokeMethod.TargetObject><InArgument x:TypeArguments="mtvc:Workspace">[Workspace]</InArgument></InvokeMethod.TargetObject></InvokeMethod><c:DropDownList Text="{x:Null}" /><If Condition="[Build_Type = BuildType.rc Or Build_Type = BuildType.Release]" DisplayName="Check if build type is rc or release and accordingly assign branch type"><If.Then><Sequence><Assign DisplayName="Assign NugetRepositoryURL to publish if it is rc or release build"><Assign.To><OutArgument x:TypeArguments="x:String">[NugetRepositoryURL]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">publish</InArgument></Assign.Value></Assign><Assign DisplayName="Assign BuildBranchType to Rel if it is rc or release build"><Assign.To><OutArgument x:TypeArguments="x:String">[BuildBranchType]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">Rel</InArgument></Assign.Value></Assign></Sequence></If.Then><If.Else><If Condition="[Build_Type = BuildType.beta]"><If.Then><Assign DisplayName="Assign BuildBranchType to Main if it is beta build"><Assign.To><OutArgument x:TypeArguments="x:String">[BuildBranchType]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">["Main"]</InArgument></Assign.Value></Assign></If.Then></If></If.Else></If><If Condition="[MSBuildVersionToBeUsed = CustomDropDownList.MSBuildVersion.Twelve]" DisplayName="Check if MSBuildVersionToBeUsed is 12 or 14"><If.Then><Assign DisplayName="Assign MSBuildToolsPath to &quot;C:\Program Files (x86)\MSBuild\12.0\Bin&quot;"><Assign.To><OutArgument x:TypeArguments="x:String">[MSBuildToolsPath]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">C:\Program Files (x86)\MSBuild\12.0\Bin</InArgument></Assign.Value></Assign></If.Then><If.Else><If Condition="[MSBuildVersionToBeUsed = CustomDropDownList.MSBuildVersion.Fourteen]"><If.Then><Assign DisplayName="Assign MSBuildToolsPath to &quot;C:\Program Files (x86)\MSBuild\14.0\Bin&quot;"><Assign.To><OutArgument x:TypeArguments="x:String">[MSBuildToolsPath]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">C:\Program Files (x86)\MSBuild\14.0\Bin</InArgument></Assign.Value></Assign></If.Then><If.Else><Assign DisplayName="Assign MSBuildToolsPath to &quot;C:\Program Files (x86)\MSBuild\14.0\Bin&quot;"><Assign.To><OutArgument x:TypeArguments="x:String">[MSBuildToolsPath]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Empty]</InArgument></Assign.Value></Assign></If.Else></If></If.Else></If><Assign DisplayName="Assign BuildDropLatestFoldersRootPath"><Assign.To><OutArgument x:TypeArguments="x:String">[BuildDropLatestFoldersRootPath]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[System.IO.Path.Combine(BuildDropBasePath, BuildDetail.TeamProject, BuildBranchType, BuildDetail.BuildDefinition.Name)]</InArgument></Assign.Value></Assign><If Condition="[Not GetVersion = String.Empty]" DisplayName="Check If GetVersion Is A Changeset Or Label, Accordingly Get Latest Of Reference And Seed Files"><If.Then><Sequence><mtbwa:TfGet Getting="{x:Null}" NonFatalError="{x:Null}" DisplayName="TfGet Latest - VersionSeedFilePath" FileSpec="[VersionSeedFilePath]" Options="[GetOptions.Overwrite]" Recursion="[RecursionType.Full]" Version="T" Workspace="[Workspace]" /><mtbwa:TfGet Getting="{x:Null}" NonFatalError="{x:Null}" DisplayName="TfGet Latest - VersionReferenceFilePath" FileSpec="[VersionReferenceFilePath]" Options="[GetOptions.Overwrite]" Recursion="[RecursionType.Full]" Version="T" Workspace="[Workspace]" /></Sequence></If.Then><If.Else><Sequence><mtbwa:TfGet Getting="{x:Null}" NonFatalError="{x:Null}" DisplayName="TfGet Latest - VersionSeedFilePath" FileSpec="[VersionSeedFilePath]" Options="[GetOptions.Overwrite]" Recursion="[RecursionType.Full]" Version="T" Workspace="[Workspace]" /><mtbwa:TfGet Getting="{x:Null}" NonFatalError="{x:Null}" DisplayName="TfGet Latest - VersionReferenceFilePath" FileSpec="[VersionReferenceFilePath]" Options="[GetOptions.Overwrite]" Recursion="[RecursionType.Full]" Version="T" Workspace="[Workspace]" /></Sequence></If.Else></If><mtbwa:ConvertWorkspaceItem DisplayName="Convert VersionReferenceFilePath to Local Path" Input="[VersionReferenceFilePath]" Result="[VersionReferenceLocalPath]" Workspace="[Workspace]" /><tva:CheckOutFile DisplayName="Checkout VersionReference.xml" FileToCheckOut="[VersionReferenceLocalPath]" Workspace="[Workspace]" /><mtbwa:ConvertWorkspaceItem DisplayName="Convert VersionSeedFilePath to Local Path" Input="[VersionSeedFilePath]" Result="[VersionSeedLocalPath]" Workspace="[Workspace]" /><mtbwa:WriteBuildMessage DisplayName="Print VersionSeedLocalPath" Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[String.Format(&quot;Version Seed file is: {0}&quot;, VersionSeedLocalPath)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><tva:CheckOutFile DisplayName="Checkout VersionSeed.xml" FileToCheckOut="[VersionSeedLocalPath]" Workspace="[Workspace]" /><tax:XmlFile Element="{x:Null}" FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" InnerText="{x:Null}" InnerXml="{x:Null}" InsertAfterXPath="{x:Null}" InsertBeforeXPath="{x:Null}" Key="{x:Null}" Namespaces="{x:Null}" ParentElement="{x:Null}" Prefix="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="ReadAttribute" DisplayName="Read MajorVersion from VersionReference.xml" File="[VersionReferenceLocalPath]" LogExceptionStack="True" RetryCount="5" Value="[MajorVersion]" XPath="/BuildVersions/property[@name = 'major']/@value" /><tax:XmlFile Element="{x:Null}" FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" InnerText="{x:Null}" InnerXml="{x:Null}" InsertAfterXPath="{x:Null}" InsertBeforeXPath="{x:Null}" Key="{x:Null}" Namespaces="{x:Null}" ParentElement="{x:Null}" Prefix="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="ReadAttribute" DisplayName="Read MinorVersion from VersionReference.xml" File="[VersionReferenceLocalPath]" LogExceptionStack="True" RetryCount="5" Value="[MinorVersion]" XPath="/BuildVersions/property[@name = 'minor']/@value" /><tax:XmlFile Element="{x:Null}" FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" InnerText="{x:Null}" InnerXml="{x:Null}" InsertAfterXPath="{x:Null}" InsertBeforeXPath="{x:Null}" Key="{x:Null}" Namespaces="{x:Null}" ParentElement="{x:Null}" Prefix="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="ReadAttribute" DisplayName="Read PatchVersion from VersionReference.xml" File="[VersionReferenceLocalPath]" LogExceptionStack="True" RetryCount="5" Value="[PatchVersion]" XPath="/BuildVersions/property[@name = 'patch']/@value" /><tax:XmlFile Element="{x:Null}" FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" InnerText="{x:Null}" InnerXml="{x:Null}" InsertAfterXPath="{x:Null}" InsertBeforeXPath="{x:Null}" Key="{x:Null}" Namespaces="{x:Null}" ParentElement="{x:Null}" Prefix="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="ReadAttribute" DisplayName="Read BuildRevision from VersionReference.xml" File="[VersionReferenceLocalPath]" LogExceptionStack="True" RetryCount="5" Value="[BuildRevision]" XPath="/BuildVersions/property[@name = 'revision']/@value" /><If Condition="[Build_Type = CustomDropDownList.BuildType.Release]" DisplayName="Increment build number for regular non release builds else assign build number to 0 and increment patch version by one for release builds"><If.Then><Sequence><Assign x:TypeArguments="x:String" DisplayName="Assign Build Revision to 0" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[IncrementedBuildRevision]" Value="0" /><Assign x:TypeArguments="x:String" DisplayName="Increment Patch Version" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[PatchVersion]" Value="[(Integer.Parse(PatchVersion) + 1).ToString()]" /><tax:XmlFile Element="{x:Null}" FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" InnerText="{x:Null}" InnerXml="{x:Null}" InsertAfterXPath="{x:Null}" InsertBeforeXPath="{x:Null}" Key="{x:Null}" Namespaces="{x:Null}" ParentElement="{x:Null}" Prefix="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="UpdateAttribute" DisplayName="Update Patch Version in VersionReference.xml" File="[VersionReferenceLocalPath]" LogExceptionStack="True" RetryCount="5" Value="[PatchVersion]" XPath="/BuildVersions/property[@name = 'patch']/@value" /></Sequence></If.Then><If.Else><Assign x:TypeArguments="x:String" DisplayName="Increment Build Revision" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[IncrementedBuildRevision]" Value="[(Integer.Parse(BuildRevision) + 1).ToString()]" /></If.Else></If><tax:XmlFile Element="{x:Null}" FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" InnerText="{x:Null}" InnerXml="{x:Null}" InsertAfterXPath="{x:Null}" InsertBeforeXPath="{x:Null}" Key="{x:Null}" Namespaces="{x:Null}" ParentElement="{x:Null}" Prefix="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="UpdateAttribute" DisplayName="Update BuildRevision in VersionReference.xml" File="[VersionReferenceLocalPath]" LogExceptionStack="True" RetryCount="5" Value="[IncrementedBuildRevision]" XPath="/BuildVersions/property[@name = 'revision']/@value" /><Assign x:TypeArguments="x:String" DisplayName="Pad Build Revision with leading zeros" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[PaddedBuildRevision]" Value="[Integer.Parse(IncrementedBuildRevision).ToString(&quot;000&quot;)]" /><Assign DisplayName="Assign Major.Minor.Patch.IncrementedBuildRevision as BuildVersion"><Assign.To><OutArgument x:TypeArguments="x:String">[BuildVersion]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Format("{0}.{1}.{2}.{3}", MajorVersion, MinorVersion, PatchVersion, IncrementedBuildRevision)]</InArgument></Assign.Value></Assign><If Condition="[UpdateAssemblyVersion]" DisplayName="If UpdateAssemblyVersion is True"><If.Then><tax:XmlFile Element="{x:Null}" FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" InnerText="{x:Null}" InsertAfterXPath="{x:Null}" InsertBeforeXPath="{x:Null}" Key="{x:Null}" Namespaces="{x:Null}" ParentElement="{x:Null}" Prefix="{x:Null}" TreatWarningsAsErrors="{x:Null}" Value="{x:Null}" Action="UpdateElement" DisplayName="Update BuildRevision in VersionSeed.xml - AssemblyVersionPattern" File="[VersionSeedLocalPath]" InnerXml="[BuildVersion]" LogExceptionStack="True" RetryCount="5" XPath="/VersionSeed/Solution[@name='Default']/AssemblyVersionPattern" /></If.Then></If><tax:XmlFile Element="{x:Null}" FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" InnerText="{x:Null}" InsertAfterXPath="{x:Null}" InsertBeforeXPath="{x:Null}" Key="{x:Null}" Namespaces="{x:Null}" ParentElement="{x:Null}" Prefix="{x:Null}" TreatWarningsAsErrors="{x:Null}" Value="{x:Null}" Action="UpdateElement" DisplayName="Update BuildRevision in VersionSeed.xml - AssemblyFileVersionPattern" File="[VersionSeedLocalPath]" InnerXml="[BuildVersion]" LogExceptionStack="True" RetryCount="5" XPath="/VersionSeed/Solution[@name='Default']/AssemblyFileVersionPattern" /><mtbwa:WriteBuildMessage DisplayName="Print Build Version" Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[String.Format(&quot;Build Number is {0}&quot;, BuildVersion)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><If Condition="[CppVersion]" DisplayName="If C++ versioning is True"><If.Then><Sequence><Sequence.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="VersionInfoFiles" /></Sequence.Variables><mtbwa:FindMatchingFiles DisplayName="Find ap*.rc Files" MatchPattern="[String.Format(&quot;{0}\**\{1}&quot;, SourcesDirectory, VersionInfoFilePattern)]" Result="[VersionInfoFiles]" /><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[VersionInfoFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><Sequence><taf:File Attributes="{x:Null}" Checksum="{x:Null}" IgnoreExceptions="{x:Null}" Path="{x:Null}" TextEncoding="{x:Null}" Action="Replace" DisplayName="Version C++ VersionInfo files - BUILDVERSION" FailBuildOnError="True" Files="[{item}]" Force="True" LogExceptionStack="True" RegexPattern="[String.Format(&quot;BUILDVERSION\s+{0}\d+.\d+.\d+.\d+&quot;, &quot;&quot;&quot;&quot;)]" Replacement="[String.Format(&quot;BUILDVERSION     {0}{1}&quot;, &quot;&quot;&quot;&quot;, BuildVersion)]" TargetPath="[Path.GetDirectoryName(item)]" Time="0001-01-01" TreatWarningsAsErrors="True" /><taf:File Attributes="{x:Null}" Checksum="{x:Null}" IgnoreExceptions="{x:Null}" Path="{x:Null}" TextEncoding="{x:Null}" Action="Replace" DisplayName="Version C++ VersionInfo files - BUILDNUMBER" FailBuildOnError="True" Files="[{item}]" Force="True" LogExceptionStack="True" RegexPattern="BUILDNUMBER\s+\d+,\s*\d+,\s*\d+,\s*\d+" Replacement="[String.Format(&quot;BUILDNUMBER      {0},{1},{2},{3}&quot;, MajorVersion, MinorVersion, PatchVersion, IncrementedBuildRevision)]" TargetPath="[Path.GetDirectoryName(item)]" Time="0001-01-01" TreatWarningsAsErrors="True" /><If Condition="[UpdateCppAssemblyVersion]"><If.Then><taf:File Attributes="{x:Null}" Checksum="{x:Null}" IgnoreExceptions="{x:Null}" Path="{x:Null}" TextEncoding="{x:Null}" Action="Replace" DisplayName="Version C++ VersionInfo files - ASSEMBLYVERSION" FailBuildOnError="True" Files="[{item}]" Force="True" LogExceptionStack="True" RegexPattern="[String.Format(&quot;ASSEMBLYVERSION\s+{0}\d+.\d+.\d+.\d+&quot;, &quot;&quot;&quot;&quot;)]" Replacement="[String.Format(&quot;ASSEMBLYVERSION      {0}{1}&quot;, &quot;&quot;&quot;&quot;, BuildVersion)]" TargetPath="[Path.GetDirectoryName(item)]" Time="0001-01-01" TreatWarningsAsErrors="True" /></If.Then></If></Sequence></ActivityAction></ForEach></Sequence></If.Then></If><If Condition="[Build_Type = BuildType.Release]" DisplayName="Check If Build Type Release"><If.Then><Assign DisplayName="Assign Nuget version to be used "><Assign.To><OutArgument x:TypeArguments="x:String">[NugetVersionToBeUsed]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Format("{0}.{1}.{2}", MajorVersion, MinorVersion, PatchVersion)]</InArgument></Assign.Value></Assign></If.Then><If.Else><Assign DisplayName="Assign Nuget version to be used "><Assign.To><OutArgument x:TypeArguments="x:String">[NugetVersionToBeUsed]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Format("{0}.{1}.{2}-{3}{4}", MajorVersion, MinorVersion, PatchVersion, Build_Type, PaddedBuildRevision)]</InArgument></Assign.Value></Assign></If.Else></If></Sequence></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="ex" /></ActivityAction.Argument><Throw Exception="[ex]" /></ActivityAction></Catch></TryCatch.Catches><TryCatch.Finally><If Condition="[1 &lt; 2]"><If.Then><Sequence><Sequence.Variables><Variable x:TypeArguments="mtvc:PendingChange[]" Name="PendingChanges" /><Variable x:TypeArguments="mtvc:Changeset" Name="Changeset" /></Sequence.Variables><Assign><Assign.To><OutArgument x:TypeArguments="mtvc:PendingChange[]">[PendingChanges]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="mtvc:PendingChange[]">[Workspace.GetPendingChanges(New [String]() {VersionSeedFilePath, VersionReferenceFilePath})]</InArgument></Assign.Value></Assign><ca:CheckinFiles AllowUnchangedContent="{x:Null}" AssociatedWorkItems="{x:Null}" Author="{x:Null}" CheckinNotes="{x:Null}" Comment="{x:Null}" NoAutoResolve="{x:Null}" NoConflictsCheckForGatedCheckin="{x:Null}" QueueBuildForGatedCheckIn="{x:Null}" Result="{x:Null}" SuppressEvent="{x:Null}" AssociatedWorkspace="[Workspace]" BuildDetails="[BuildDetail]" OverrideGatedCheckIn="True" OverridePolicies="True" PendingChanges="[PendingChanges]" xmlns:s10="clr-namespace:System;assembly=System.ComponentModel.Composition" xmlns:s2="clr-namespace:System;assembly=System.ServiceModel" xmlns:s3="clr-namespace:System;assembly=Microsoft.VisualStudio.Platform.VSEditor" xmlns:s4="clr-namespace:System;assembly=System.Numerics" xmlns:s5="clr-namespace:System;assembly=System.DirectoryServices" xmlns:s6="clr-namespace:System;assembly=System.Configuration.Install" xmlns:s7="clr-namespace:SqlCommandsExecution;assembly=SqlCommandsExecution" xmlns:s8="clr-namespace:System;assembly=StyleCop" xmlns:s9="clr-namespace:System;assembly=System" /></Sequence></If.Then><If.Else><If Condition="[System.IO.Path.GetDirectoryName(VersionReferenceFilePath) = System.IO.Path.GetDirectoryName(VersionSeedFilePath)]" DisplayName="Check If VersionRefrence.xml file folder is same as the versionseed.xml file folder "><If.Then><mtbwa:InvokeProcess Arguments="[&quot;checkin &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionReferenceLocalPath) + &quot;&quot;&quot;&quot; + &quot; /comment:&quot; + &quot;&quot;&quot;&quot; + &quot;Build Checkin of Version File&quot; + &quot;&quot;&quot;&quot; + &quot; /noprompt /override:&quot; + &quot;&quot;&quot;&quot; + &quot;BuildCheckin&quot; + &quot;&quot;&quot;&quot; + &quot; /recursive /force&quot;]" DisplayName="Checkin version files" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[errOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Sequence><Sequence.Variables><Variable x:TypeArguments="mtvc:VersionControlServer" Name="VersionVar" /></Sequence.Variables><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><If Condition="[stdOutput.Contains(&quot;Changeset #&quot;)]" DisplayName="Check If The Output From Checkin Returned Changeset Number"><If.Then><InvokeMethod DisplayName="InvokeMethod To Add The acquired Changeset To A IList object" MethodName="Insert"><InvokeMethod.TargetObject><InArgument x:TypeArguments="scg:IList(mtvc:Changeset)">[TempAssociatedChangesets]</InArgument></InvokeMethod.TargetObject><InArgument x:TypeArguments="x:Int32">[TempAssociatedChangesets.Count]</InArgument><InArgument x:TypeArguments="mtvc:Changeset">[BuildDetail.BuildServer.TeamProjectCollection.GetService(Of VersionControlServer)().GetChangeset(Int32.Parse(System.Text.RegularExpressions.Regex.Match(stdOutput, "#[0-9]*").Value.Replace("#"c, "0"c)))]</InArgument></InvokeMethod></If.Then></If></Sequence></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then><If.Else><Sequence><mtbwa:InvokeProcess Arguments="[&quot;checkin &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionReferenceLocalPath) + &quot;&quot;&quot;&quot; + &quot; /comment:&quot; + &quot;&quot;&quot;&quot; + &quot;Build Checkin of Version File&quot; + &quot;&quot;&quot;&quot; + &quot; /noprompt /override:&quot; + &quot;&quot;&quot;&quot; + &quot;BuildCheckin&quot; + &quot;&quot;&quot;&quot; + &quot; /recursive /force&quot;]" DisplayName="Checkin versionreference file" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[errOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Sequence><Sequence.Variables><Variable x:TypeArguments="mtvc:VersionControlServer" Name="VersionVar" /></Sequence.Variables><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><If Condition="[stdOutput.Contains(&quot;Changeset #&quot;)]" DisplayName="Check If The Output From Checkin Returned Changeset Number"><If.Then><InvokeMethod DisplayName="InvokeMethod To Add The acquired Changeset To A IList object" MethodName="Insert"><InvokeMethod.TargetObject><InArgument x:TypeArguments="scg:IList(mtvc:Changeset)">[TempAssociatedChangesets]</InArgument></InvokeMethod.TargetObject><InArgument x:TypeArguments="x:Int32">[TempAssociatedChangesets.Count]</InArgument><InArgument x:TypeArguments="mtvc:Changeset">[BuildDetail.BuildServer.TeamProjectCollection.GetService(Of VersionControlServer)().GetChangeset(Int32.Parse(System.Text.RegularExpressions.Regex.Match(stdOutput, "#[0-9]*").Value.Replace("#"c, "0"c)))]</InArgument></InvokeMethod></If.Then></If></Sequence></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:InvokeProcess Arguments="[&quot;checkin &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionSeedLocalPath) + &quot;&quot;&quot;&quot; + &quot; /comment:&quot; + &quot;&quot;&quot;&quot; + &quot;Build Checkin of Version File&quot; + &quot;&quot;&quot;&quot; + &quot; /noprompt /override:&quot; + &quot;&quot;&quot;&quot; + &quot;BuildCheckin&quot; + &quot;&quot;&quot;&quot; + &quot; /recursive /force&quot;]" DisplayName="Checkin versionseed file" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[errOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Sequence><Sequence.Variables><Variable x:TypeArguments="mtvc:VersionControlServer" Name="VersionVar" /></Sequence.Variables><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><If Condition="[stdOutput.Contains(&quot;Changeset #&quot;)]" DisplayName="Check If The Output From Checkin Returned Changeset Number"><If.Then><InvokeMethod DisplayName="InvokeMethod To Add The acquired Changeset To A IList object" MethodName="Insert"><InvokeMethod.TargetObject><InArgument x:TypeArguments="scg:IList(mtvc:Changeset)">[TempAssociatedChangesets]</InArgument></InvokeMethod.TargetObject><InArgument x:TypeArguments="x:Int32">[TempAssociatedChangesets.Count]</InArgument><InArgument x:TypeArguments="mtvc:Changeset">[BuildDetail.BuildServer.TeamProjectCollection.GetService(Of VersionControlServer)().GetChangeset(Int32.Parse(System.Text.RegularExpressions.Regex.Match(stdOutput, "#[0-9]*").Value.Replace("#"c, "0"c)))]</InArgument></InvokeMethod></If.Then></If></Sequence></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Else></If></If.Else></If></TryCatch.Finally></TryCatch><Sequence DisplayName="Update Build Number"><If Condition="[Build_Type = CustomDropDownList.BuildType.Release]" DisplayName="If this is a Release build"><If.Then><Sequence><mtbwa:InvokeForReason DisplayName="Update Build Number for Triggered Builds"><mtbwa:UpdateBuildNumber BuildNumberFormat="[String.Format(&quot;{0}-Release-{1}&quot;, BinariesDirSubFolder, BuildVersion)]" DisplayName="Update Build Number" /></mtbwa:InvokeForReason><Assign DisplayName="Assign SemanticBuildVersioning"><Assign.To><OutArgument x:TypeArguments="x:String">[SemanticBuildVersion]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[MajorVersion + "." + MinorVersion + "." + PatchVersion]</InArgument></Assign.Value></Assign></Sequence></If.Then><If.Else><Sequence><mtbwa:InvokeForReason DisplayName="Update Build Number for Triggered Builds"><mtbwa:UpdateBuildNumber BuildNumberFormat="[String.Format(&quot;{0}-{1}&quot;, BinariesDirSubFolder, BuildVersion)]" DisplayName="Update Build Number" /></mtbwa:InvokeForReason><Assign DisplayName="Assign SemanticBuildVersioning"><Assign.To><OutArgument x:TypeArguments="x:String">[SemanticBuildVersion]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Format("{0}.{1}.{2}-{3}{4}", MajorVersion, MinorVersion, PatchVersion, Build_Type, PaddedBuildRevision)]</InArgument></Assign.Value></Assign></Sequence></If.Else></If><If Condition="[GetVersion = &quot;&quot;]" DisplayName="Check If GetVersion Contains A Changeset Or A Label Build, Accordingly Update The Build Number If Its Not A Build On The Latest Code"><If.Else><mtbwa:UpdateBuildNumber BuildNumberFormat="[&quot;NotLatest-&quot; + BuildDetail.BuildNumber]" DisplayName="Update Build Number" /></If.Else></If></Sequence><mtbwa:CreateDirectory Directory="[BuildDirectory + &quot;\VersionSeed&quot;]" DisplayName="Create VersionSeed Folder at BuildDirectory" /><mtbwa:InvokeProcess Arguments="[&quot;/C copy &quot; + &quot;&quot;&quot;&quot; + VersionSeedLocalPath + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + BuildDirectory + &quot;\VersionSeed&quot; + &quot;&quot;&quot;&quot;]" DisplayName="Copy VersionSeedLocalPath to VersionSeed folder" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><tva:VersionAssemblyInfoFiles AssemblyCompanyPattern="{x:Null}" AssemblyConfigurationPattern="{x:Null}" AssemblyCopyrightPattern="{x:Null}" AssemblyCulturePattern="{x:Null}" AssemblyDescriptionPattern="{x:Null}" AssemblyFileVersionPattern="{x:Null}" AssemblyInformationalVersionPattern="{x:Null}" AssemblyProductPattern="{x:Null}" AssemblyTitlePattern="{x:Null}" AssemblyTrademarkPattern="{x:Null}" AssemblyVersionPattern="{x:Null}" BuildNumberPrefix="{x:Null}" mva:VisualBasic.Settings="{x:Null}" AssemblyInfoFilePattern="[AssemblyInfoFilePattern]" BuildDirectory="[BuildDirectory]" BuildSettings="[BuildSettings]" DisplayName="Versioning AssemblyInfo.* files" DoCheckinAssemblyInfoFiles="[DoCheckinAssemblyInfoFiles]" ForceCreateVersion="[ForceCreateVersion]" UseVersionSeedFile="[UseVersionSeedFile]" VersionSeedFilePath="[VersionSeedFilePath]" Workspace="[Workspace]" /></Sequence> <Sequence DisplayName="Activity when full template is used for gated builds"><If Condition="[System.IO.Path.GetDirectoryName(VersionReferenceFilePath) = System.IO.Path.GetDirectoryName(VersionSeedFilePath)]" DisplayName="Check If VersionRefrence.xml file folder is same as the versionseed.xml file folder "><If.Then><mtbwa:InvokeProcess Arguments="[&quot;workfold /cloak &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionReferenceFilePath) + &quot;&quot;&quot;&quot; + &quot; /workspace:&quot; + Workspace.Name + &quot; /collection:&quot; + TfsCollection]" DisplayName="InvokeProcess to cloak version files folder" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Tfs Cloak message -&gt;&quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then><If.Else><Sequence><mtbwa:InvokeProcess Arguments="[&quot;workfold /cloak &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionReferenceFilePath) + &quot;&quot;&quot;&quot; + &quot; /workspace:&quot; + Workspace.Name + &quot; /collection:&quot; + TfsCollection]" DisplayName="InvokeProcess to cloak VersionReference file folder" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Tfs Cloak message -&gt;&quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:InvokeProcess Arguments="[&quot;workfold /cloak &quot; + &quot;&quot;&quot;&quot; + System.IO.Path.GetDirectoryName(VersionSeedFilePath) + &quot;&quot;&quot;&quot; + &quot; /workspace:&quot; + Workspace.Name + &quot; /collection:&quot; + TfsCollection]" DisplayName="InvokeProcess to cloak VersionSeed file folder" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TF.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Tfs Cloak message -&gt;&quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Else></If></Sequence> <mtbwa:InvokeProcess Arguments="[TfsCollection.ToString() + &quot; &quot; + &quot;&quot;&quot;&quot; + BuildDetail.TeamProject + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + BuildDetail.BuildDefinition.Name + &quot;&quot;&quot;&quot;]" DisplayName="Run CheckWorkspaceMapping Utility" FileName="C:\SOFTWARE\CheckWorkspaceMapping\CheckWorkspaceMapping.exe" Result="[WorkspaceMappingCheckExitCode]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess> <Assign DisplayName="Initialized CreateLabel = True irrespective of the value given in BD"><Assign.To><OutArgument x:TypeArguments="x:Boolean">[CreateLabel]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Boolean">True</InArgument></Assign.Value></Assign> <If Condition="[WorkspaceMappingCheckExitCode = 0]" DisplayName="Check WorkspaceMappingCheckExitCode"><If.Then><If Condition="[CreateLabel]" DisplayName="If CreateLabel" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:InvokeForReason DisplayName="Create and Set Label for non-Shelveset Builds" Reason="Manual, IndividualCI, BatchedCI, Schedule, ScheduleForced, UserCreated"><mtbwa:InvokeProcess Arguments="[&quot;label &quot; + BuildDetail.BuildNumber + &quot;@$/&quot; + &quot;&quot;&quot;&quot; + BuildDetail.BuildDefinition.TeamProject + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + SourcesDirectory + &quot;&quot;&quot;&quot; + &quot; /recursive&quot;]" DisplayName="Apply label on SourcesDirectory" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\tf.exe&quot;&quot;&quot;]" WorkingDirectory="[SourcesDirectory]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></mtbwa:InvokeForReason></If.Then><If.Else><mtbwa:WriteBuildMessage DisplayName="Write Message" Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="Not Labeling sources" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></If.Then></If> <Sequence DisplayName="Intialize MSBuildObfuscatePatterns and MSBuildStrongNamePatterns with DLLs Patterns Provided at the Build Definition"><Sequence.Variables><Variable x:TypeArguments="x:Boolean" Default="False" Name="StrongNamePatternExists" /><Variable x:TypeArguments="x:Boolean" Default="False" Name="ObfuscationPatternExists" /><Variable x:TypeArguments="x:String" Default="C:\Program Files (x86)\PreEmptive Solutions\Dotfuscator Professional Edition 4.9\dotfuscator.exe" Name="ObfuscationFilePath" /><Variable x:TypeArguments="scg:List(x:String)" Default="[New List(Of String)]" Name="ObfuscationLicenseMessage" /><Variable x:TypeArguments="x:String" Name="ObfuscationLicenseResult"><Variable.Default><Literal x:TypeArguments="x:String" Value="" /></Variable.Default></Variable></Sequence.Variables><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="Check if Strong naming File List is not null " Result="[StrongNamePatternExists]" Value="[StrongNameFiles]" /><If Condition="[StrongNamePatternExists]" DisplayName="If Strong Naming Patterns Are Passed"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[StrongNameFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><Sequence><If Condition="[item.Contains(&quot;*&quot;)]" DisplayName="Check if the pattern provided at the Build Definition contains wildcard *"><If.Then><Assign DisplayName="Replace wildcard * with its ASCII value in the pattern for MSBuild to accept the pattern"><Assign.To><OutArgument x:TypeArguments="x:String">[item]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[item.Replace("*", "%2A")]</InArgument></Assign.Value></Assign></If.Then></If><Assign DisplayName="Add the DLL to the MSBuildStrongNamePatterns list"><Assign.To><OutArgument x:TypeArguments="x:String">[MSBuildStrongNamePatterns]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Format(MSBuildStrongNamePatterns + item + ";")]</InArgument></Assign.Value></Assign></Sequence></ActivityAction></ForEach></If.Then></If><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="Check if Obfuscation List is not null " Result="[ObfuscationPatternExists]" Value="[FilesToObfuscate]" /><If Condition="[(ObfuscationPatternExists) And (FilesToObfuscate.Length &gt; 0)]" DisplayName="If Obfuscationpattern is provided then"><If.Then><If Condition="[System.IO.File.Exists(ObfuscationFilePath)]" DisplayName="If ObfuscationFile is found"><If.Then><Sequence><mtbwa:InvokeProcess Arguments="/?" DisplayName="InvokeProcess to get the Obfuscation Verbose" FileName="[ObfuscationFilePath]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><InvokeMethod MethodName="Add"><InvokeMethod.TargetObject><InArgument x:TypeArguments="scg:List(x:String)">[ObfuscationLicenseMessage]</InArgument></InvokeMethod.TargetObject><InArgument x:TypeArguments="x:String">[stdOutput]</InArgument></InvokeMethod></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><Assign><Assign.To><OutArgument x:TypeArguments="x:String">[ObfuscationLicenseResult]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Join(",", ObfuscationLicenseMessage.ToArray())]</InArgument></Assign.Value></Assign><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[ObfuscationLicenseResult]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><If Condition="[ObfuscationLicenseResult.Contains(&quot;expired&quot;)]"><If.Then><Throw Exception="[New Exception(&quot;Dotfuscator License has Expired&quot;)]" /></If.Then><If.Else><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[FilesToObfuscate]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><Sequence><If Condition="[item.Contains(&quot;*&quot;)]" DisplayName="Check if the pattern provided at the Build Definition contains wildcard *"><If.Then><Assign DisplayName="Replace wildcard * with its ASCII value in the pattern for MSBuild to accept the pattern"><Assign.To><OutArgument x:TypeArguments="x:String">[item]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[item.Replace("*", "%2A")]</InArgument></Assign.Value></Assign></If.Then></If><Assign DisplayName="Add the DLL to the MSBuildObfuscatePatterns List"><Assign.To><OutArgument x:TypeArguments="x:String">[MSBuildObfuscatePatterns]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Format(MSBuildObfuscatePatterns + item + ";")]</InArgument></Assign.Value></Assign></Sequence></ActivityAction></ForEach></If.Else></If></Sequence></If.Then><If.Else><Throw Exception="[New Exception(&quot;Dotfuscator is not installed on this Build server&quot;)]" /></If.Else></If></If.Then></If><If Condition="[1 &gt; 2]" DisplayName="If Obfuscate Patterns are found"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[FilesToObfuscate]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><Sequence><If Condition="[item.Contains(&quot;*&quot;)]" DisplayName="Check if the pattern provided at the Build Definition contains wildcard *"><If.Then><Assign DisplayName="Replace wildcard * with its ASCII value in the pattern for MSBuild to accept the pattern"><Assign.To><OutArgument x:TypeArguments="x:String">[item]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[item.Replace("*", "%2A")]</InArgument></Assign.Value></Assign></If.Then></If><Assign DisplayName="Add the DLL to the MSBuildObfuscatePatterns List"><Assign.To><OutArgument x:TypeArguments="x:String">[MSBuildObfuscatePatterns]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[String.Format(MSBuildObfuscatePatterns + item + ";")]</InArgument></Assign.Value></Assign></Sequence></ActivityAction></ForEach></If.Then></If></Sequence> <Sequence DisplayName="Update Drop Location" mtbwt1:BuildTrackingParticipant.Importance="Low"><If Condition="[(Not String.IsNullOrEmpty(BuildDetail.DropLocationRoot)) AndAlso (BuildDetail.Reason And Microsoft.TeamFoundation.Build.Client.BuildReason.Triggered) = BuildDetail.Reason]" DisplayName="If Build Reason is Triggered" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><If Condition="[Build_Type = CustomDropDownList.BuildType.Release Or Build_Type = CustomDropDownList.BuildType.rc]" DisplayName="If this is a Release build"><If.Then><Sequence mtbwt1:BuildTrackingParticipant.Importance="None"><Assign x:TypeArguments="x:String" DisplayName="Assign DropLocation - Rc/Release" mtbwt1:BuildTrackingParticipant.Importance="None" To="[DropLocation]" Value="[BuildDropProvider.CombinePaths(BuildDetail.DropLocationRoot, BuildDetail.BuildDefinition.Name, Build_Type.ToString, BuildDetail.BuildNumber)]" /></Sequence></If.Then><If.Else><Sequence mtbwt1:BuildTrackingParticipant.Importance="None"><Assign x:TypeArguments="x:String" DisplayName="Assign DropLocation" mtbwt1:BuildTrackingParticipant.Importance="None" To="[DropLocation]" Value="[BuildDropProvider.CombinePaths(BuildDetail.DropLocationRoot, BuildDetail.BuildDefinition.Name, BuildDetail.BuildNumber)]" /></Sequence></If.Else></If></If.Then></If><mtbwa:SetBuildProperties DisplayName="Set Drop Location" DropLocation="[DropLocation]" mtbwt1:BuildTrackingParticipant.Importance="Low" PropertiesToSet="DropLocation" /><If Condition="[(Not String.IsNullOrEmpty(PrivateDropLocation)) AndAlso BuildDetail.Reason = Microsoft.TeamFoundation.Build.Client.BuildReason.ValidateShelveset]" DisplayName="If Build Reason is ValidateShelveset" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Sequence mtbwt1:BuildTrackingParticipant.Importance="None"><Assign x:TypeArguments="x:String" mtbwt1:BuildTrackingParticipant.Importance="None" To="[DropLocation]" Value="[BuildDropProvider.CombinePaths(PrivateDropLocation, BuildDetail.BuildDefinition.Name, BuildDetail.BuildNumber)]" /><mtbwa:SetBuildProperties DisplayName="Set Drop Location for Private Build" DropLocation="[DropLocation]" mtbwt1:BuildTrackingParticipant.Importance="Low" PropertiesToSet="DropLocation" /></Sequence></If.Then></If><If Condition="[BuildDetail.DropLocationRoot.IndexOf(BuildDropProvider.CombinePaths(BuildDropBasePath, BuildDetail.TeamProject, BuildBranchType), StringComparison.OrdinalIgnoreCase) &gt;= 0]" DisplayName="Check if build drop path provided at the BD conforms with the standard path structure"><If.Else><mtbwa:WriteCustomSummaryInformation DisplayName="CustomSummary - Build Output Details" Message="[&quot;!!!ATTENTION!!!&quot; + &quot;\n&quot; +&#xA;&quot;Build Drop Path provided at the build definition does not conform with Common Components standards.&quot; + &quot;\n&quot; +&#xA;&quot;Standard build drop path for the selected build type (&quot; + Build_Type.ToString + &quot;) should be: &quot; + BuildDropProvider.CombinePaths(BuildDropBasePath, BuildDetail.TeamProject, BuildBranchType) + &quot;\n&quot; +&#xA;&quot;Use Dev, Main and Rel for alpha, beta, rc/release build types respectively.&quot; + &quot;\n&quot; +&#xA;&quot;!!!ATTENTION!!!&quot;]" SectionDisplayName="Build Output" SectionKey="BuildOutput" SectionPriority="160" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></Sequence> <TryCatch DisplayName="Try Compile, Test, and Associate Changesets and Work Items" mtbwt1:BuildTrackingParticipant.Importance="Low"><TryCatch.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="XAPfile" /></TryCatch.Variables><TryCatch.Finally><Sequence><Sequence DisplayName="Revert Workspace and Copy Files to Drop Location" mtbwt1:BuildTrackingParticipant.Importance="Low"><mtbwa:InvokeForReason DisplayName="Revert Workspace for Shelveset Builds" Reason="ValidateShelveset, CheckInShelveset"><mtbwa:RevertWorkspace DisplayName="Revert Workspace" Workspace="[Workspace]" /></mtbwa:InvokeForReason><If Condition="[Not String.IsNullOrEmpty(DropLocation)]" DisplayName="If DropLocation is Set" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Sequence><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="Check if CustomizedDropList is not null" Result="[CustomizedDropListExists]" Value="[CustomizedDropList]" /><If Condition="[CustomizedDropListExists]" DisplayName="Check If CustomizedDropList found"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; in CustomizedDropList" Values="[CustomizedDropList]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><mtbwa:InvokeProcess Arguments="[&quot; /C Robocopy /S /E &quot; + BinariesDirectory + &quot;\&quot; + item + &quot; &quot; + DropLocation + &quot;\&quot; + item]" DisplayName="Drop Files to Drop Location - Customized" FileName="C:\windows\system32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></ActivityAction></ForEach></If.Then><If.Else><Sequence><mtbwa:CopyDirectory Destination="[DropLocation]" DisplayName="Drop Files to Drop Location" Source="[BinariesDirectory]" /></Sequence></If.Else></If><mtbwa:WriteCustomSummaryInformation DisplayName="CustomSummary - Build Output Details" Message="[&quot;Build Staging Location: &quot; + BuildDetail.DropLocation]" SectionDisplayName="Build Output" SectionKey="BuildOutput" SectionPriority="160" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></Sequence></If.Then></If></Sequence></Sequence></TryCatch.Finally><TryCatch.Try><Sequence mtbwt1:BuildTrackingParticipant.Importance="None"><Sequence.Variables><Variable x:TypeArguments="s:Exception" Name="compilationException" /><Variable x:TypeArguments="scg:IList(mtvc:Changeset)" Name="associatedChangesets" /><Variable x:TypeArguments="x:Boolean" Name="treatTestFailureAsBuildFailure" /></Sequence.Variables><Parallel DisplayName="Compile, Test, and Associate Changesets and Work Items"><TryCatch DisplayName="Try Compile and Test" mtbwt1:BuildTrackingParticipant.Importance="Low"><TryCatch.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="ObfuscatePattern" /></TryCatch.Variables><TryCatch.Try><Sequence DisplayName="Compile and Test"><ForEach x:TypeArguments="mtbwa:PlatformConfiguration" DisplayName="For Each Configuration in BuildSettings.PlatformConfigurations" mtbwt1:BuildTrackingParticipant.Importance="Low" Values="[BuildSettings.PlatformConfigurations]"><ActivityAction x:TypeArguments="mtbwa:PlatformConfiguration"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="mtbwa:PlatformConfiguration" Name="platformConfiguration" /></ActivityAction.Argument><Sequence DisplayName="Compile and Test for Configuration" mtbwt1:BuildTrackingParticipant.Importance="Low"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="outputDirectory" /><Variable x:TypeArguments="x:String" Name="logFileDropLocation" /><Variable x:TypeArguments="x:String" Name="localPostBuildProject" /><Variable x:TypeArguments="x:Boolean" Name="PostBuildProjectsExist" /><Variable x:TypeArguments="x:String" Name="ThirdPartyDigitalSignFilesExpandedList"><Variable.Default><Literal x:TypeArguments="x:String" Value="" /></Variable.Default></Variable><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="ThirdPartyDigitalSignFilesMatchedList" /></Sequence.Variables><Sequence DisplayName="Initialize Variables" mtbwt1:BuildTrackingParticipant.Importance="Low"><Assign x:TypeArguments="x:String" DisplayName="Create OutputDirectory Per Platform and Configuration" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[outputDirectory]" Value="[If (platformConfiguration.IsEmpty Or BuildSettings.PlatformConfigurations.Count = 1, BinariesDirectory, If (platformConfiguration.IsPlatformEmptyOrAnyCpu, BinariesDirectory + &quot;\&quot; + platformConfiguration.Configuration, BinariesDirectory + &quot;\&quot; + platformConfiguration.Platform + &quot;\&quot; + platformConfiguration.Configuration))]" /><If Condition="[Not String.IsNullOrEmpty(DropLocation)]" DisplayName="If DropLocation is Set" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Assign x:TypeArguments="x:String" DisplayName="Initialize LogFile Drop Location" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[logFileDropLocation]" Value="[If (platformConfiguration.IsEmpty Or BuildSettings.PlatformConfigurations.Count = 1, BuildDropProvider.CombinePaths(DropLocation, &quot;logs&quot;), If (platformConfiguration.IsPlatformEmptyOrAnyCpu, BuildDropProvider.CombinePaths(DropLocation, &quot;logs&quot;, platformConfiguration.Configuration), BuildDropProvider.CombinePaths(DropLocation, &quot;logs&quot;, platformConfiguration.Platform, platformConfiguration.Configuration)))]" /></If.Then></If></Sequence><Sequence DisplayName="Pre Build Sequence"><Sequence.Variables><Variable x:TypeArguments="x:Boolean" Name="PreBuildProjectsExist" /></Sequence.Variables><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="Check if IsNotNull - PreBuildProjects" Result="[PreBuildProjectsExist]" Value="[PreBuildProjects]" /><If Condition="[PreBuildProjectsExist]"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach Project Under PreBuildProjects" Values="[PreBuildProjects]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="project" /></ActivityAction.Argument><If Condition="[project.Contains(&quot;.&quot;)]" DisplayName="Check if Pre Build projects has content - Has atleast a &quot;.&quot; in it"><If.Then><Sequence DisplayName="Pre Build Activities"><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Path to Local Path" mtbwt1:BuildTrackingParticipant.Importance="Low" Input="[project]" Result="[localPreBuildProject]" Workspace="[Workspace]" /><mtbwa:MSBuild AllowUntrustedCertificate="{x:Null}" CreatePackageOnPublish="{x:Null}" DeployOnBuild="{x:Null}" CommandLineArguments="[String.Format(&quot;/p:SkipInvalidConfigurations=true /p:BuildNumber={1} /p:BuildDropPath={4}{2}{4} /p:CompiledOutputFilePath={4}{3}{4} /p:CompiledOutputListExe={5}  /p:DigitalCodeSignAll={6} {0}&quot;, PreMSBuildArguments, BuildDetail.BuildNumber, BuildDetail.DropLocation, CompileOutputXml, &quot;&quot;&quot;&quot;, CompiledOutputListExe, DigitalCodeSignAll.ToString)]" Configuration="[platformConfiguration.Configuration]" DisplayName="Run MSBuild for PreBuild Project" GenerateVSPropsFile="True" LogFileDropLocation="[logFileDropLocation]" Platform="[platformConfiguration.Platform]" Project="[localPreBuildProject]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" ToolPath="[MSBuildToolsPath]" ToolPlatform="[MSBuildPlatform]" Verbosity="[Verbosity]" /></Sequence></If.Then><If.Else><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="No valid pre build project provided at build definition" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></ActivityAction></ForEach></If.Then></If></Sequence><Sequence DisplayName="Strong Naming Third Party DLLs"><Sequence.Variables><Variable x:TypeArguments="x:Int32" Default="1" Name="ThirdPartyStrongNameCounter" /></Sequence.Variables><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="IsNotNull Check - StrongNameThirdPartyFiles" Result="[ThirdPartyStrongNameExists]" Value="[StrongNameThirdPartyFiles]" /><If Condition="[StrongNaming And ThirdPartyStrongNameExists]" DisplayName="Check if StrongNameThirdPartyFiles is not null"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[StrongNameThirdPartyFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><If Condition="[item.Length &gt; 0]" DisplayName="If the length of item to strong name is not 0"><If.Then><Sequence><Sequence.Variables><Variable x:TypeArguments="x:String" Name="ThirdPartyStrongNameFullPath" /></Sequence.Variables><Assign DisplayName="Assign full path of third party dll to ThirdPartyStrongNameFullPath"><Assign.To><OutArgument x:TypeArguments="x:String">[ThirdPartyStrongNameFullPath]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[SourcesDirectory + "\" + item]</InArgument></Assign.Value></Assign><mtbwa:MSBuild CommandLineArguments="[String.Format(&quot;/p:SkipInvalidConfigurations=true /p:StrongNameThirdPartyFile={1}{2}{1} /p:StrongNameKey={3} /p:DoThirdPartyStrongNaming=True {0}&quot;, MSBuildArguments, &quot;&quot;&quot;&quot;, ThirdPartyStrongNameFullPath, StrongNamePvtKey.ToString)]" DisplayName="Run MSBuild on AllscriptsCustomTargets.targets" LogFile="[SourcesDirectory + &quot;\ThirdPartyStrongName-&quot; + ThirdPartyStrongNameCounter.ToString + &quot;.log&quot;]" Project="C:\Windows\Microsoft.NET\Framework\v4.0.30319\AllscriptsCustomTargets.targets" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" Targets="[{&quot;CommonTargetToObfuscateDigitalSignAndStrongName&quot;}]" /><Assign DisplayName="Increment ThirdPartyStrongNameCounter"><Assign.To><OutArgument x:TypeArguments="x:Int32">[ThirdPartyStrongNameCounter]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[ThirdPartyStrongNameCounter + 1]</InArgument></Assign.Value></Assign></Sequence></If.Then><If.Else><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="Item has no length" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></ActivityAction></ForEach></If.Then></If></Sequence><Sequence DisplayName="Digital Sign Third Party DLLs"><Sequence.Variables><Variable x:TypeArguments="x:Int32" Default="1" Name="ThirdPartyStrongNameCounter" /><Variable x:TypeArguments="x:String" Name="ThirdPartyDigitalSignFullPath"><Variable.Default><Literal x:TypeArguments="x:String" Value="" /></Variable.Default></Variable></Sequence.Variables><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="IsNotNull Check - DigitalSignThirdPartyFiles" Result="[ThirdPartyDigitalSignExists]" Value="[DigitalSignThirdPartyFiles]" /><If Condition="[ThirdPartyDigitalSignExists]" DisplayName="Check if Digital Sign ThirdPartyFiles is not null"><If.Then><Sequence><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[DigitalSignThirdPartyFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><If Condition="[(item.Length &gt; 0 AndAlso Not item.Contains(&quot;.dll&quot;))]" DisplayName="If the length of item to Digital Sign is not 0"><If.Then><Sequence><Sequence.Variables><Variable x:TypeArguments="x:String" Name="ThirdPartyStrongNameFullPath" /><Variable x:TypeArguments="x:Int32" Default="1" Name="ThirdPartyDigitalSignCounter" /></Sequence.Variables><Assign DisplayName="Assign full path of third party dll to ThirdPartyDigitalSignFullPath"><Assign.To><OutArgument x:TypeArguments="x:String">[ThirdPartyDigitalSignFullPath]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[ThirdPartyDigitalSignFullPath + SourcesDirectory + "\" + item + ";"]</InArgument></Assign.Value></Assign></Sequence></If.Then><If.Else><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="Item has no length" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></ActivityAction></ForEach><If Condition="[ThirdPartyDigitalSignFullPath &lt;&gt; &quot;&quot;]" DisplayName="Check If the pattern to be passed is null"><If.Then><mtbwa:MSBuild CommandLineArguments="[String.Format(&quot;/p:SkipInvalidConfigurations=true /p:DigitalSignThirdPartyFile={1}{2}{1} /p:DoThirdPartyDigitalSigning=True {0}&quot;, MSBuildArguments, &quot;&quot;&quot;&quot;, ThirdPartyDigitalSignFullPath)]" DisplayName="Run MSBuild on AllscriptsCustomTargets.targets" LogFile="[SourcesDirectory + &quot;\ThirdPartyStrongName.log&quot;]" Project="C:\Windows\Microsoft.NET\Framework\v4.0.30319\AllscriptsCustomTargets.targets" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" Targets="[{&quot;CommonTargetToObfuscateDigitalSignAndStrongName&quot;}]" /></If.Then></If></Sequence></If.Then></If></Sequence><If Condition="[BuildSettings.HasProjectsToBuild]" DisplayName="If BuildSettings.HasProjectsToBuild" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="For Each Project in BuildSettings.ProjectsToBuild" mtbwt1:BuildTrackingParticipant.Importance="Low" Values="[BuildSettings.ProjectsToBuild]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="serverBuildProjectItem" /></ActivityAction.Argument><TryCatch DisplayName="Try to Compile the Project" mtbwt1:BuildTrackingParticipant.Importance="Low"><TryCatch.Variables><Variable x:TypeArguments="x:String" Default="[System.IO.Path.Combine(SourcesDirectory, &quot;StyleCopViolations-&quot; + ViolationsXmlCount.ToString() + &quot;.xml&quot;)]" Name="StylecopViolationFile" /><Variable x:TypeArguments="x:String" Name="StyleCopExclusionString" /></TryCatch.Variables><TryCatch.Try><Sequence DisplayName="Compile the Project" mtbwt1:BuildTrackingParticipant.Importance="Low"><Sequence.Variables><Variable x:TypeArguments="x:String" Default="[outputDirectory]" Name="outputDirectoryPerProject" /><Variable x:TypeArguments="x:String" Name="MSBuildoutputDirectoryPerProject" /></Sequence.Variables><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Path to Local Path" mtbwt1:BuildTrackingParticipant.Importance="Low" Input="[serverBuildProjectItem]" Result="[localProject]" Workspace="[Workspace]" /><If Condition="[SolutionSpecificBuildOutputs]" DisplayName="If Build Outputs are Solution-Specific" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Sequence DisplayName="Update Output Directory" mtbwt1:BuildTrackingParticipant.Importance="Low"><Assign x:TypeArguments="x:String" DisplayName="Set Solution-Specific Output Directory" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[outputDirectoryPerProject]" Value="[System.IO.Path.Combine(outputDirectory, System.IO.Path.GetFileNameWithoutExtension(localProject))]" /><If Condition="[System.IO.Directory.Exists(outputDirectoryPerProject)]" DisplayName="If Output Directory Exists" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:WriteBuildWarning DisplayName="Write Duplicate Project Names Warning" Message="[String.Format(&quot;{0} conflicts with another solution/project. Build outputs for solutions/projects with the same name will be copied to the same directory. To separate the build outputs, change the name of one of the solutions/projects.&quot;, System.IO.Path.GetFileNameWithoutExtension(localProject))]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Then></If></Sequence></If.Then></If><If Condition="[PerformStyleCopScan]" DisplayName="If Stylecop is enabled"><If.Then><Sequence DisplayName="Perform StyleCop Check"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="CustomStylecopSettingsLocalPath" /><Variable x:TypeArguments="x:Boolean" Default="False" Name="CustomStylecopSettingsExists" /><Variable x:TypeArguments="x:String" Default="C:\Software\StyleCop4.7_CLI\Settings.StyleCop" Name="StylecopSettingsFile" /><Variable x:TypeArguments="x:Int32" Default="0" Name="StylecopViolationsCurrentCount" /></Sequence.Variables><mtbwe1:IsNotNull x:TypeArguments="x:String" DisplayName="Check if CustomStylecopSettingsPath exists" Result="[CustomStylecopSettingsExists]" Value="[CustomStylecopSettingsPath]" /><If Condition="[CustomStylecopSettingsExists]" DisplayName="If the CustomStylecopSettingsPath exists"><If.Then><Sequence><mtbwa:ConvertWorkspaceItem DisplayName="Convert StylecopCustomSettingsPath to Local Path" Input="[CustomStylecopSettingsPath]" Result="[CustomStylecopSettingsLocalPath]" Workspace="[Workspace]" /><Assign DisplayName="Use StylecopCustomSettings provided at the build definition as the StylecopSettingsFile"><Assign.To><OutArgument x:TypeArguments="x:String">[StylecopSettingsFile]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[CustomStylecopSettingsLocalPath]</InArgument></Assign.Value></Assign></Sequence></If.Then></If><If Condition="[Path.GetExtension(localProject) = &quot;.sln&quot;]" DisplayName="If project is a solution .sln"><If.Then><If Condition="[2 &gt; 1]" DisplayName="Dummy if so that the orignal logic to run stylcop on sln is not deleted"><If.Then><mtbwa:InvokeProcess Arguments="[&quot;-sln &quot; + &quot;&quot;&quot;&quot; + localProject + &quot;&quot;&quot;&quot; + &quot; -out &quot; + &quot;&quot;&quot;&quot; + StylecopViolationFile + &quot;&quot;&quot;&quot; + &quot; -set &quot; + &quot;&quot;&quot;&quot; + StylecopSettingsFile + &quot;&quot;&quot;&quot;]" DisplayName="InvokeProcess" FileName="C:\Software\StyleCop4.7_CLI\StyleCopCLI.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then><If.Else><Sequence DisplayName="Sequence to call stylecopinteractiveApp before stylecopexe rather than calling stylecop directly so that projects can be excluded"><Sequence.Variables><Variable x:TypeArguments="x:Boolean" Name="StyleCopExclusionProjectsListNullCheck" /></Sequence.Variables><mtbwe1:IsNotNull x:TypeArguments="s:String[]" Result="[StyleCopExclusionProjectsListNullCheck]" Value="[StyleCopExclusionProjects]" /><If Condition="[StyleCopExclusionProjectsListNullCheck]"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[StyleCopExclusionProjects]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><Assign><Assign.To><OutArgument x:TypeArguments="x:String">[StyleCopExclusionString]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[StyleCopExclusionString + ";" + item]</InArgument></Assign.Value></Assign></ActivityAction></ForEach></If.Then><If.Else><Assign><Assign.To><OutArgument x:TypeArguments="x:String">[StyleCopExclusionString]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">;</InArgument></Assign.Value></Assign></If.Else></If><mtbwa:InvokeProcess Arguments="[&quot;&quot;&quot;&quot; + localProject + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + StylecopViolationFile + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + StylecopSettingsFile + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + StyleCopExclusionString + &quot;&quot;&quot;&quot;]" FileName="C:\Software\StyleCop4.7_CLI\StyleCopInteractiveApp.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Else></If></If.Then><If.Else><If Condition="[Path.GetExtension(localProject) = &quot;.csproj&quot;]" DisplayName="If project is a .csproj"><If.Then><mtbwa:InvokeProcess Arguments="[&quot;-proj &quot; + &quot;&quot;&quot;&quot; + localProject + &quot;&quot;&quot;&quot; + &quot; -out &quot; + &quot;&quot;&quot;&quot; + StylecopViolationFile + &quot;&quot;&quot;&quot; + &quot; -set &quot; + &quot;&quot;&quot;&quot; + StylecopSettingsFile + &quot;&quot;&quot;&quot;]" FileName="C:\Software\StyleCop4.7_CLI\StyleCopCLI.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then></If></If.Else></If><If Condition="[System.IO.File.Exists(StylecopViolationFile)]" DisplayName="Check if StylecopViolationFile exists"><If.Then><Sequence><mtbwa:InvokeProcess Arguments="[&quot;/C findstr /R /N &quot; + &quot;&quot;&quot;&quot; + &quot;^.*Violation Section=.*$&quot; + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + StylecopViolationFile + &quot;&quot;&quot;&quot; + &quot; | find /c &quot; + &quot;&quot;&quot;&quot; + &quot;:&quot; + &quot;&quot;&quot;&quot;]" DisplayName="Count the no. of stylecop violations" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign DisplayName="Add up TotalStylecopViolationsCount"><Assign.To><OutArgument x:TypeArguments="x:Int32">[StylecopViolationsCurrentCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[Integer.Parse(stdOutput) - 1]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><Assign DisplayName="Add up TotalStylecopViolationsCount"><Assign.To><OutArgument x:TypeArguments="x:Int32">[TotalStylecopViolationsCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[TotalStylecopViolationsCount + StylecopViolationsCurrentCount]</InArgument></Assign.Value></Assign></Sequence></If.Then><If.Else><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;StylecopViolationFile &quot; + StylecopViolationFile + &quot; does not exist&quot;]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;TotalStylecopViolationsCount = &quot; + TotalStylecopViolationsCount.ToString]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><Assign DisplayName="Increment ViolationsXml file counter"><Assign.To><OutArgument x:TypeArguments="x:Int32">[ViolationsXmlCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[ViolationsXmlCount + 1]</InArgument></Assign.Value></Assign><If Condition="[StylecopViolationsCurrentCount &gt; 0]" DisplayName="Flag stylecop violation"><If.Then><Assign DisplayName="Set StyleCopFailFlag to True"><Assign.To><OutArgument x:TypeArguments="x:Boolean">[StyleCopFailFlag]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Boolean">True</InArgument></Assign.Value></Assign></If.Then></If></Sequence></If.Then></If><If Condition="[AgentSettings.Tags.Contains(&quot;CCS-Published&quot;) Or AgentSettings.Tags.Contains(&quot;CC-Stage&quot;)]" DisplayName="Initialize MSBuildoutputDirectoryPerProject based on the Agent tags provided in the build definition"><If.Then><Assign DisplayName="Assign outputDirectoryPerProject"><Assign.To><OutArgument x:TypeArguments="x:String">[MSBuildoutputDirectoryPerProject]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[outputDirectoryPerProject]</InArgument></Assign.Value></Assign></If.Then><If.Else><Assign DisplayName="Assign &quot;&quot;"><Assign.To><OutArgument x:TypeArguments="x:String">[MSBuildoutputDirectoryPerProject]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String"><Literal x:TypeArguments="x:String" Value="" /></InArgument></Assign.Value></Assign></If.Else></If><Sequence><Assign DisplayName="Assign MSBuild Argument-1"><Assign.To><OutArgument x:TypeArguments="x:String">[AdditionalMSBuildArguments]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">["/p:DoStrongNaming=" + StrongNaming.ToString + " /p:StrongNamingPatterns=" + """" + MSBuildStrongNamePatterns + """" + " /p:StrongNameKey=" + StrongNamePvtKey.ToString]</InArgument></Assign.Value></Assign><Assign DisplayName="Assign MSBuild Argument-2"><Assign.To><OutArgument x:TypeArguments="x:String">[AdditionalMSBuildArguments]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[AdditionalMSBuildArguments + " /p:ObfuscationPatterns=" + """" + MSBuildObfuscatePatterns + """" + " /p:DigitalCodeSignAll=" + DigitalCodeSignAll.ToString]</InArgument></Assign.Value></Assign><Assign DisplayName="Assign MSBuild Argument-3"><Assign.To><OutArgument x:TypeArguments="x:String">[AdditionalMSBuildArguments]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[AdditionalMSBuildArguments + " /p:SemanticBuildVersion=" + SemanticBuildVersion + " /p:BinariesDir=" + """" + BinariesDirectory + """" + " /p:NugetVersionToBeUsed=" + """" + NugetVersionToBeUsed + """"]</InArgument></Assign.Value></Assign></Sequence><mtbwa:MSBuild AllowUntrustedCertificate="{x:Null}" CreatePackageOnPublish="{x:Null}" DeployOnBuild="{x:Null}" CommandLineArguments="[String.Format(&quot;/p:SkipInvalidConfigurations=true /p:BuildNumber={1} /p:BuildDropPath={4}{2}{4} /p:CompiledOutputFilePath={4}{3}{4} /p:CompiledOutputListExe={5} {6} {0}&quot;, MSBuildArguments, BuildDetail.BuildNumber, BuildDetail.DropLocation, CompileOutputXml, &quot;&quot;&quot;&quot;, CompiledOutputListExe, AdditionalMSBuildArguments)]" Configuration="[platformConfiguration.Configuration]" DisplayName="Run MSBuild for Project" GenerateVSPropsFile="[True]" LogFileDropLocation="[logFileDropLocation]" MaxProcesses="[If (MSBuildMultiProc, 0, 1)]" OutDir="[MSBuildoutputDirectoryPerProject]" Platform="[platformConfiguration.Platform]" Project="[localProject]" RunCodeAnalysis="[RunCodeAnalysis]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" TargetsNotLogged="[New String() {&quot;GetNativeManifest&quot;, &quot;GetCopyToOutputDirectoryItems&quot;, &quot;GetTargetPath&quot;}]" ToolPath="[MSBuildToolsPath]" ToolPlatform="[MSBuildPlatform]" Verbosity="[Verbosity]" /></Sequence></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="ex" /></ActivityAction.Argument><Sequence DisplayName="Handle Exception"><Sequence.Variables><Variable x:TypeArguments="scg:ICollection(mtbc:IQueuedBuild)" Name="failedRequests" /></Sequence.Variables><mtbwa:SetBuildProperties CompilationStatus="[Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Failed]" DisplayName="Set CompilationStatus to Failed" mtbwt1:BuildTrackingParticipant.Importance="Low" PropertiesToSet="CompilationStatus" /><If Condition="[CreateWorkItem]" DisplayName="If CreateWorkItem" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:InvokeForReason DisplayName="Create Work Item for non-Shelveset Builds" Reason="Manual, IndividualCI, BatchedCI, Schedule, ScheduleForced, UserCreated"><mtbwa:OpenWorkItem AssignedTo="[BuildDetail.RequestedFor]" Comment="[&quot;This work item was created by TFS Build on a build failure.&quot;]" CustomFields="[New Dictionary(Of String, String) From { {&quot;System.Reason&quot;, &quot;Build Failure&quot;}, {&quot;Microsoft.VSTS.TCM.ReproSteps&quot;, &quot;Start the build using TFS Build&quot;}, {&quot;Severity&quot;, &quot;1 - Critical&quot;} }]" DisplayName="Create Work Item" Title="[String.Format(&quot;Build Failure in Build: {0}&quot;, BuildDetail.BuildNumber)]" Type="[&quot;Bug&quot;]" /></mtbwa:InvokeForReason></If.Then></If><mtbwa:GetApprovedRequests DisplayName="Get Requests Approved for Check In" mtbwt1:BuildTrackingParticipant.Importance="None" Result="[failedRequests]" /><mtbwa:RetryRequests Behavior="[Microsoft.TeamFoundation.Build.Workflow.Activities.RetryBehavior.DoNotBatch]" DisplayName="Mark Requests for Retry" mtbwt1:BuildTrackingParticipant.Importance="Low" Requests="[failedRequests]" /><Rethrow DisplayName="Rethrow the exception so the build will stop" mtbwt1:BuildTrackingParticipant.Importance="Low" /></Sequence></ActivityAction></Catch></TryCatch.Catches></TryCatch></ActivityAction></ForEach></If.Then></If><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;SourcesDirectory Path = &quot; + SourcesDirectory + &quot;  DropLocation Path = &quot; + DropLocation + &quot;  LocalProject value = &quot; + localProject]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><mtbwa:CreateDirectory Directory="[Path.Combine(BinariesDirectory, platformConfiguration.Configuration)]" DisplayName="Create Platform Config Folder" /><mtbwa:CopyDirectory Destination="[BinariesDirectory + &quot;\AutoDeploy\DscScripts&quot;]" DisplayName="Copy DSCScripts to AutoDeploy folder" Source="[DSCSourceDir]" /><Sequence DisplayName="JavaScript Code Coverage"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="JavascriptJsonLocalFilePath" /><Variable x:TypeArguments="x:Boolean" Default="False" Name="JavaScriptFileExists" /></Sequence.Variables><mtbwe1:IsNotNull x:TypeArguments="x:String" DisplayName="IsNotNull - JavaScriptJsonFilePath" Result="[JavaScriptFileExists]" Value="[JavaScriptJsonFilePath]" /><If Condition="[JavaScriptFileExists]" DisplayName="Check IF JavaScript Setting File Given"><If.Then><Sequence DisplayName="Sequence TO execute JavaScripts Code Coverage"><Sequence.Variables><Variable x:TypeArguments="x:String" Default="C:\Software\Chutzpah.3.2.3\chutzpah.console.exe" Name="ChutzpahToolPath" /></Sequence.Variables><mtbwa:ConvertWorkspaceItem DisplayName="Convert TFS Server Path Of JavaScript Setting File To Local Path " Input="[JavaScriptJsonFilePath]" Result="[JavascriptJsonLocalFilePath]" Workspace="[Workspace]" /><mtbwa:CreateDirectory Directory="[BinariesDirectory + &quot;\JavaScriptCodeCoverage&quot;]" DisplayName="Create JavaScript Code Coverage output directory" /><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/coverage /path {0}&quot;, JavascriptJsonLocalFilePath)]" DisplayName="InvokeProcess To execute Chutzpah" FileName="[ChutzpahToolPath]" WorkingDirectory="[BinariesDirectory + &quot;\JavaScriptCodeCoverage&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Then></If></Sequence><Sequence DisplayName="JAVA-ANT Build"><If Condition="[ANTBuild]"><If.Then><Sequence><mtbwa:InvokeProcess Arguments="[String.Format(&quot; -f {0}{1}{0}&quot;, &quot;&quot;&quot;&quot;, Path.Combine(SourcesDirectory, antbuildfile))]" DisplayName="Ant Execution" FileName="C:\Program Files\apache-ant-1.9.2\bin\ant.bat"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;WriteMsg stdOutput=&quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:CreateDirectory Directory="[Path.Combine(BinariesDirectory, platformConfiguration.Configuration, &quot;javabin&quot;)]" DisplayName="Create Platform Config Folder" /><mtbwa:CopyDirectory Destination="[Path.Combine(BinariesDirectory, platformConfiguration.Configuration, &quot;javabin&quot;)]" Source="[Path.Combine(SourcesDirectory, IO.Path.GetDirectoryName(antbuildfile), &quot;bin&quot;)]" /></Sequence></If.Then></If></Sequence><If Condition="[Sonar]" DisplayName="Sonar"><If.Then><Sequence DisplayName="Copy to Sonar Server"><Sequence.Variables><Variable x:TypeArguments="x:String" Default="[&quot;\\10.106.14.22\Sonar-Projects\&quot; + BinariesDirSubFolder]" Name="SonarOutput" /><Variable x:TypeArguments="x:String" Default="[&quot;\\10.106.14.22\Sonar-Projects\properties-files\&quot; + BinariesDirSubFolder + &quot;\Project.bat&quot;]" Name="SonarScript" /></Sequence.Variables><mtbwa:DeleteDirectory Directory="[SonarOutput]" /><mtbwa:CreateDirectory Directory="[SonarOutput]" /><mtbwa:CopyDirectory Destination="[SonarOutput]" DisplayName="Copy Sources Directories" Source="[SourcesDirectory]" /><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;SourcesDirectory path= &quot; + SourcesDirectory + &quot; SonarOutput path= &quot; + SonarOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><mtbwa:InvokeProcess Arguments="[&quot;-d&quot; + &quot; &quot; + &quot;\\10.106.14.22&quot; + &quot; &quot; + SonarScript]" DisplayName="Execute Sonar Script" FileName="C:\Windows\System32\PsExec.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Psexec step&quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Then></If><TryCatch DisplayName="Parse and Read CompileOutputXml"><TryCatch.Variables><Variable x:TypeArguments="sx3:XmlReader" Name="XmlReader" /></TryCatch.Variables><TryCatch.Finally><If Condition="[System.IO.File.Exists(CompileOutputXml)]" DisplayName="Close XML Reader Handle if CompileOutputXml exists"><If.Then><InvokeMethod DisplayName="Close XmlReader Handle" MethodName="Close"><InvokeMethod.TargetObject><InArgument x:TypeArguments="sx3:XmlReader">[XmlReader]</InArgument></InvokeMethod.TargetObject></InvokeMethod></If.Then></If></TryCatch.Finally><TryCatch.Try><If Condition="[System.IO.File.Exists(CompileOutputXml)]" DisplayName="Check if CompileOutputXml exists"><If.Then><Sequence DisplayName="Read CompiledOutputXml"><Sequence.Variables><Variable x:TypeArguments="sc:IDictionary" Name="Buildsysvar" /></Sequence.Variables><Assign DisplayName="Assign xmlReader"><Assign.To><OutArgument x:TypeArguments="sx3:XmlReader">[XmlReader]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="sx3:XmlReader">[XmlReader.Create(New FileStream(CompileOutputXml, FileMode.OpenOrCreate, FileAccess.Read))]</InArgument></Assign.Value></Assign><While DisplayName="While CompileOutputXml is completely read" Condition="[XmlReader.Read()]"><If Condition="[XmlReader.Name = &quot;Compiled&quot;]" DisplayName="Check if the attribute contains the tag &quot;Compiled&quot;"><If.Then><AddToCollection x:TypeArguments="x:String" Collection="[CompiledOutputListCollection]" DisplayName="Read attribute's &quot;OutputPath&quot; value and add it to collection" Item="[XmlReader(&quot;OutputPath&quot;)]" /></If.Then></If></While></Sequence></If.Then></If></TryCatch.Try></TryCatch><Sequence DisplayName="Output-Folder-Per-Project"><mtbwa:FindMatchingFiles DisplayName="Find Project files *.csproj" MatchPattern="[IO.Path.Combine(SourcesDirectory, &quot;**\*.csproj&quot;)]" Result="[CsProjects]" /><ForEach x:TypeArguments="x:String" DisplayName="Output-Folder Sequence *.csproj" Values="[CsProjects]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="CsItem" /></ActivityAction.Argument><Sequence DisplayName="Sequence to copy and count fxcop"><Sequence.Variables><Variable x:TypeArguments="x:Int32" Default="0" Name="FxcopErrorsCurrentCount" /><Variable x:TypeArguments="x:Int32" Default="0" Name="FxcopCriticalErrorsCurrentCount" /></Sequence.Variables><If Condition="[Directory.Exists(BinariesDirectory + &quot;\&quot; + platformConfiguration.Configuration + &quot;\&quot; + Path.GetFileNameWithoutExtension(CsItem))]" DisplayName="If Binaries directory with project directory exists"><If.Then><Sequence DisplayName="Copy left out files to binaries directory"><If Condition="[Directory.Exists(Path.GetDirectoryName(CsItem) + &quot;\bin\&quot; + platformConfiguration.Configuration)]" DisplayName="If bin contains configuration directory"><If.Then><mtbwa:InvokeProcess Arguments="[&quot;/C ROBOCOPY &quot; + &quot;&quot;&quot;&quot; + Path.GetDirectoryName(CsItem) + &quot;\bin\&quot; + platformConfiguration.Configuration + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + BinariesDirectory + &quot;\&quot; + platformConfiguration.Configuration + &quot;\&quot; + Path.GetFileNameWithoutExtension(CsItem) + &quot;&quot;&quot;&quot; + &quot; *.* /E /xo /xc /xn&quot;]" DisplayName="InvokeProcess To copy uncopied files" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then><If.Else><mtbwa:InvokeProcess Arguments="[&quot;/C ROBOCOPY &quot; + &quot;&quot;&quot;&quot; + Path.GetDirectoryName(CsItem) + &quot;\bin&quot; + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + BinariesDirectory + &quot;\&quot; + platformConfiguration.Configuration + &quot;\&quot; + Path.GetFileNameWithoutExtension(CsItem) + &quot;&quot;&quot;&quot; + &quot; *.* /E /xo /xc /xn&quot;]" DisplayName="InvokeProcess to copy uncopied files" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Else></If></Sequence></If.Then></If><If Condition="[Directory.EnumerateFiles(Path.GetDirectoryName(CsItem), &quot;*FxCopAnalysisOutput.xml&quot;).Any()]" DisplayName="Check If FxCopAnalysisOutput xml exists"><If.Then><Sequence><mtbwa:InvokeProcess Arguments="[&quot;/C findstr /R /N &quot; + &quot;&quot;&quot;&quot; + &quot;^.*&lt;Issue.*Level=.*Error.*$&quot; + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + Path.GetDirectoryName(CsItem) + &quot;\*FxCopAnalysisOutput.xml&quot; + &quot;&quot;&quot;&quot; + &quot; | find /c &quot; + &quot;&quot;&quot;&quot; + &quot;:&quot; + &quot;&quot;&quot;&quot;]" DisplayName="InvokeProcess to count errors in fxcopoutput aml file" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign DisplayName="Add up TotalFxCopViolationsCount"><Assign.To><OutArgument x:TypeArguments="x:Int32">[FxcopErrorsCurrentCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[Integer.Parse(stdOutput)]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:InvokeProcess Arguments="[&quot;/C findstr /R /N &quot; + &quot;&quot;&quot;&quot; + &quot;^.*&lt;Issue.*Level=.*CriticalError.*$&quot; + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + Path.GetDirectoryName(CsItem) + &quot;\*FxCopAnalysisOutput.xml&quot; + &quot;&quot;&quot;&quot; + &quot; | find /c &quot; + &quot;&quot;&quot;&quot; + &quot;:&quot; + &quot;&quot;&quot;&quot;]" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign><Assign.To><OutArgument x:TypeArguments="x:Int32">[FxcopCriticalErrorsCurrentCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[Integer.Parse(stdOutput)]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><Assign DisplayName="Add up TotalFxCopCriticalErrorsCount"><Assign.To><OutArgument x:TypeArguments="x:Int32">[TotalFxCopCriticalErrorsCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[TotalFxCopCriticalErrorsCount + FxcopCriticalErrorsCurrentCount]</InArgument></Assign.Value></Assign><Assign DisplayName="Sum up the total count"><Assign.To><OutArgument x:TypeArguments="x:Int32">[TotalFxCopErrorsCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[TotalFxCopErrorsCount + FxCopErrorsCurrentCount]</InArgument></Assign.Value></Assign></Sequence></If.Then></If></Sequence></ActivityAction></ForEach><mtbwa:FindMatchingFiles DisplayName="Find Project files *.vcxproj" MatchPattern="[IO.Path.Combine(SourcesDirectory, &quot;**\*.vcxproj&quot;)]" Result="[VcxProjects]" /><ForEach x:TypeArguments="x:String" DisplayName="Output-Folder Sequence *.vcxproj" Values="[VcxProjects]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="VcxItem" /></ActivityAction.Argument><Sequence DisplayName="Sequence to copy and count FxCop violations"><Sequence.Variables><Variable x:TypeArguments="x:Int32" Default="0" Name="FxcopErrorsCurrentCount" /><Variable x:TypeArguments="x:Int32" Default="0" Name="FxcopCriticalErrorsCurrentCount" /></Sequence.Variables><If Condition="[1 &gt; 2]"><If.Then><mtbwa:CopyDirectory Destination="[Path.Combine(BinariesDirectory, platformConfiguration.Configuration, Path.GetFileNameWithoutExtension(VcxItem))]" DisplayName="Copy vcxproj BIN from Sources to Binaries" Source="[Path.Combine(SourcesDirectory, Path.GetDirectoryName(VcxItem), &quot;bin&quot;)]" /></If.Then></If><If Condition="[Directory.EnumerateFiles(Path.GetDirectoryName(VcxItem), &quot;*FxCopAnalysisOutput.xml&quot;).Any()]" DisplayName="Check if FxcopAnalysisOutput xml exists"><If.Then><Sequence><mtbwa:InvokeProcess Arguments="[&quot;/C findstr /R /N &quot; + &quot;&quot;&quot;&quot; + &quot;^.*&lt;Issue.*Level=.*Error.*$&quot; + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + Path.GetDirectoryName(VcxItem) + &quot;\*FxCopAnalysisOutput.xml&quot; + &quot;&quot;&quot;&quot; + &quot; | find /c &quot; + &quot;&quot;&quot;&quot; + &quot;:&quot; + &quot;&quot;&quot;&quot;]" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign DisplayName="Add up TotalStylecopViolationsCount"><Assign.To><OutArgument x:TypeArguments="x:Int32">[FxcopErrorsCurrentCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[Integer.Parse(stdOutput)]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:InvokeProcess Arguments="[&quot;/C findstr /R /N &quot; + &quot;&quot;&quot;&quot; + &quot;^.*&lt;Issue.*Level=.*CriticalError.*$&quot; + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + Path.GetDirectoryName(VcxItem) + &quot;\*FxCopAnalysisOutput.xml&quot; + &quot;&quot;&quot;&quot; + &quot; | find /c &quot; + &quot;&quot;&quot;&quot; + &quot;:&quot; + &quot;&quot;&quot;&quot;]" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign><Assign.To><OutArgument x:TypeArguments="x:Int32">[FxcopCriticalErrorsCurrentCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[Integer.Parse(stdOutput)]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><Assign DisplayName="Add up TotalFxCopCriticalErrorsCount"><Assign.To><OutArgument x:TypeArguments="x:Int32">[TotalFxCopCriticalErrorsCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[TotalFxCopCriticalErrorsCount + FxcopCriticalErrorsCurrentCount]</InArgument></Assign.Value></Assign><Assign><Assign.To><OutArgument x:TypeArguments="x:Int32">[TotalFxCopErrorsCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[TotalFxCopErrorsCount + FxCopErrorsCurrentCount]</InArgument></Assign.Value></Assign></Sequence></If.Then></If></Sequence></ActivityAction></ForEach></Sequence><If Condition="[Not DisableTests]" DisplayName="If Not DisableTests" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Sequence DisplayName="Run Tests" mtbwt1:BuildTrackingParticipant.Importance="Low"><If Condition="[Not TestSpecs Is Nothing]" DisplayName="If Not TestSpecs Is Nothing" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><ForEach x:TypeArguments="mtbwa:TestSpec" DisplayName="For Each TestSpec in TestSpecs" mtbwt1:BuildTrackingParticipant.Importance="Low" Values="[TestSpecs]"><ActivityAction x:TypeArguments="mtbwa:TestSpec"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="mtbwa:TestSpec" Name="spec" /></ActivityAction.Argument><TryCatch DisplayName="Try Run Tests" mtbwt1:BuildTrackingParticipant.Importance="Low"><TryCatch.Try><If Condition="[TypeOf spec Is Microsoft.TeamFoundation.Build.Workflow.Activities.AgileTestPlatformSpec]" DisplayName="If spec Is AgileTestPlatformSpec" mtbwt1:BuildTrackingParticipant.Importance="None"><If.Then><Sequence DisplayName="Run Agile Test Runner for Test Sources" mtbwt1:BuildTrackingParticipant.Importance="Low"><Sequence.Variables><Variable x:TypeArguments="mtbwa:AgileTestPlatformSpec" Name="agileTestPlatformAssembly" /><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="agileTestPlatformAssemblies" /></Sequence.Variables><Assign x:TypeArguments="mtbwa:AgileTestPlatformSpec" DisplayName="Assign spec to agileTestPlatformAssembly" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[agileTestPlatformAssembly]" Value="[DirectCast(spec, Microsoft.TeamFoundation.Build.Workflow.Activities.AgileTestPlatformSpec)]" /><mtbwa:FindMatchingFiles DisplayName="Find Agile Test Platform Test Assemblies" mtbwt1:BuildTrackingParticipant.Importance="Low" MatchPattern="[String.Format(&quot;{0}\{1}&quot;, outputDirectory, agileTestPlatformAssembly.AssemblyFileSpec)]" Result="[agileTestPlatformAssemblies]" /><If Condition="[agileTestPlatformAssemblies.Count() &gt; 0]" DisplayName="If Agile Test Platform Test Assemblies Found" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><If Condition="[agileTestPlatformAssembly.HasRunSettingsFile]" DisplayName="If agileTestPlatformAssembly.HasRunSettingsFile" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Sequence DisplayName="Find Run Settings File And Run Agile Test Runner" mtbwt1:BuildTrackingParticipant.Importance="Low"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="localRunSettings" /></Sequence.Variables><mtbwa:GenerateRunSettings DisplayName="Generate Run Settings File" mtbwt1:BuildTrackingParticipant.Importance="Low" Result="[localRunSettings]" RunSettingsForTestRun="[agileTestPlatformAssembly.RunSettingsForTestRun]" Workspace="[Workspace]" /><mtbwa:RunTests OnTestCompleted="{x:Null}" OnTestRunCompleted="{x:Null}" DisableAutoFakes="False" DisplayName="Run Agile Test Runner for Test Sources" ExecutionPlatform="[agileTestPlatformAssembly.ExecutionPlatform]" ExecutionTimeout="[0]" Flavor="[platformConfiguration.Configuration]" Platform="[platformConfiguration.Platform]" RunName="[agileTestPlatformAssembly.RunName]" RunSettings="[localRunSettings]" TestCaseFilter="[agileTestPlatformAssembly.TestCaseFilter]" TestSources="[agileTestPlatformAssemblies]" TreatTestAdapterErrorsAsWarnings="[False]" /></Sequence></If.Then><If.Else><mtbwa:RunTests OnTestCompleted="{x:Null}" OnTestRunCompleted="{x:Null}" DisableAutoFakes="False" DisplayName="Run Agile Test Runner for Test Sources" ExecutionPlatform="[agileTestPlatformAssembly.ExecutionPlatform]" ExecutionTimeout="[0]" Flavor="[platformConfiguration.Configuration]" Platform="[platformConfiguration.Platform]" RunName="[agileTestPlatformAssembly.RunName]" TestCaseFilter="[agileTestPlatformAssembly.TestCaseFilter]" TestSources="[agileTestPlatformAssemblies]" TreatTestAdapterErrorsAsWarnings="[False]"><mtbwa:RunTests.RunSettings><InArgument x:TypeArguments="x:String"><Literal x:TypeArguments="x:String" Value="" /></InArgument></mtbwa:RunTests.RunSettings></mtbwa:RunTests></If.Else></If></If.Then></If></Sequence></If.Then><If.Else><If Condition="[TypeOf spec Is Microsoft.TeamFoundation.Build.Workflow.Activities.TestMetadataFileSpec]" DisplayName="If spec Is TestMetadataFileSpec" mtbwt1:BuildTrackingParticipant.Importance="None"><If.Then><Sequence DisplayName="Run MSTest for Metadata File"><Sequence.Variables><Variable x:TypeArguments="mtbwa:TestMetadataFileSpec" Name="testMetadataFile" /><Variable x:TypeArguments="x:String" Name="localTestMetadata" /></Sequence.Variables><Assign x:TypeArguments="mtbwa:TestMetadataFileSpec" DisplayName="Assign spec to testMetadataFile" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[testMetadataFile]" Value="[DirectCast(spec, Microsoft.TeamFoundation.Build.Workflow.Activities.TestMetadataFileSpec)]" /><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Path to Local Path" mtbwt1:BuildTrackingParticipant.Importance="Low" Input="[testMetadataFile.MetadataFileName]" Result="[localTestMetadata]" Workspace="[Workspace]" /><mtbwa:MSTest Category="[testMetadataFile.CategoryFilter]" CommandLineArguments="[testMetadataFile.MSTestCommandLineArgs]" DisplayName="Run MSTest for Metadata File" Flavor="[platformConfiguration.Configuration]" MaxPriority="[testMetadataFile.MaximumPriority]" MinPriority="[testMetadataFile.MinimumPriority]" PathToResultsFilesRoot="[TestResultsDirectory]" Platform="[platformConfiguration.Platform]" RunTitle="[testMetadataFile.RunName]" SearchPathRoot="[outputDirectory]" TestLists="[testMetadataFile.TestLists]" TestMetadata="[localTestMetadata]" TestSettings="[String.Empty]" /></Sequence></If.Then><If.Else><Sequence DisplayName="Run MSTest for Test Assemblies" mtbwt1:BuildTrackingParticipant.Importance="Low"><Sequence.Variables><Variable x:TypeArguments="mtbwa:TestAssemblySpec" Name="testAssembly" /><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="testAssemblies" /><Variable x:TypeArguments="x:String" Default="[String.Empty]" Name="testFlavor" /><Variable x:TypeArguments="x:String" Default="[String.Empty]" Name="testPlatform" /></Sequence.Variables><Assign x:TypeArguments="mtbwa:TestAssemblySpec" DisplayName="Assign spec to testAssembly" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[testAssembly]" Value="[DirectCast(spec, Microsoft.TeamFoundation.Build.Workflow.Activities.TestAssemblySpec)]" /><mtbwa:FindMatchingFiles DisplayName="Find Test Assemblies" mtbwt1:BuildTrackingParticipant.Importance="Low" MatchPattern="[String.Format(&quot;{0}\{1}&quot;, outputDirectory, testAssembly.AssemblyFileSpec)]" Result="[testAssemblies]" /><If Condition="[testAssemblies.Count() &gt; 0]" DisplayName="If Test Assemblies Found" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><If Condition="[testAssembly.HasTestSettingsFile]" DisplayName="If testAssembly.HasTestSettingsFile" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Sequence DisplayName="Find Test Settings File And Run MSTest" mtbwt1:BuildTrackingParticipant.Importance="Low"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="localTestSettings" /></Sequence.Variables><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Path to Local Path" mtbwt1:BuildTrackingParticipant.Importance="Low" Input="[testAssembly.TestSettingsFileName]" Result="[localTestSettings]" Workspace="[Workspace]" /><mtbwa:MSTest Category="[testAssembly.CategoryFilter]" CommandLineArguments="[testAssembly.MSTestCommandLineArgs]" DisplayName="Run MSTest for Test Assemblies" Flavor="[platformConfiguration.Configuration]" MaxPriority="[testAssembly.MaximumPriority]" MinPriority="[testAssembly.MinimumPriority]" PathToResultsFilesRoot="[TestResultsDirectory]" Platform="[platformConfiguration.Platform]" RunTitle="[testAssembly.RunName]" SearchPathRoot="[outputDirectory]" TestContainers="[testAssemblies]" TestSettings="[localTestSettings]" /></Sequence></If.Then><If.Else><mtbwa:MSTest Category="[testAssembly.CategoryFilter]" CommandLineArguments="[testAssembly.MSTestCommandLineArgs]" DisplayName="Run MSTest for Test Assemblies" Flavor="[platformConfiguration.Configuration]" MaxPriority="[testAssembly.MaximumPriority]" MinPriority="[testAssembly.MinimumPriority]" PathToResultsFilesRoot="[TestResultsDirectory]" Platform="[platformConfiguration.Platform]" RunTitle="[testAssembly.RunName]" SearchPathRoot="[outputDirectory]" TestContainers="[testAssemblies]" /></If.Else></If></If.Then></If></Sequence></If.Else></If></If.Else></If></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="testException" /></ActivityAction.Argument><Sequence DisplayName="Handle Test Run Exception"><Sequence.Variables><Variable x:TypeArguments="scg:ICollection(mtbc:IQueuedBuild)" Name="failedRequests" /></Sequence.Variables><If Condition="[Not (TypeOf testException Is Microsoft.TeamFoundation.Build.Workflow.Activities.TestFailureException)]" DisplayName="If testException is NOT TestFailureException" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:WriteBuildError DisplayName="Write Test Failure Message" Message="[testException.Message]" /></If.Then></If><mtbwa:SetBuildProperties DisplayName="Set TestStatus to Failed" mtbwt1:BuildTrackingParticipant.Importance="Low" PropertiesToSet="TestStatus" TestStatus="[Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Failed]" /><If Condition="[spec.FailBuildOnFailure]" DisplayName="If spec.FailBuildOnFailure" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Assign x:TypeArguments="x:Boolean" DisplayName="Set treatTestFailureAsBuildFailure to True" mtbwt1:BuildTrackingParticipant.Importance="Low" To="[treatTestFailureAsBuildFailure]" Value="[True]" /></If.Then></If><mtbwa:GetApprovedRequests DisplayName="Get Requests Approved for Check In" mtbwt1:BuildTrackingParticipant.Importance="None" Result="[failedRequests]" /><mtbwa:RetryRequests Behavior="[Microsoft.TeamFoundation.Build.Workflow.Activities.RetryBehavior.DoNotBatch]" DisplayName="Mark Requests for Retry" mtbwt1:BuildTrackingParticipant.Importance="Low" Requests="[failedRequests]" /></Sequence></ActivityAction></Catch></TryCatch.Catches></TryCatch></ActivityAction></ForEach></If.Then></If></Sequence></If.Then></If><If Condition="[Not DisableTests]" DisplayName="Determine UnitTestsCheck value to be used later - Check if unit tests execution was enabled"><If.Then><Sequence><If Condition="[treatTestFailureAsBuildFailure And (BuildDetail.TestStatus = Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Failed)]" DisplayName="Check if unit tests status is failed AND treatTestFailureAsBuildFailure provided at BD is True"><If.Then><Assign DisplayName="Assign UnitTestsCheck to False"><Assign.To><OutArgument x:TypeArguments="x:Boolean">[UnitTestsCheck]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Boolean">False</InArgument></Assign.Value></Assign></If.Then><If.Else><Assign DisplayName="Assign UnitTestsCheck to True"><Assign.To><OutArgument x:TypeArguments="x:Boolean">[UnitTestsCheck]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Boolean">True</InArgument></Assign.Value></Assign></If.Else></If></Sequence></If.Then><If.Else><Assign DisplayName="Assign UnitTestsCheck to True"><Assign.To><OutArgument x:TypeArguments="x:Boolean">[UnitTestsCheck]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Boolean">True</InArgument></Assign.Value></Assign></If.Else></If><If Condition="[PerformStylecopScan]" DisplayName="If Stylecop Scan Enabled Proceed With Build Status Update"><If.Then><Sequence DisplayName="Copy Stylecop Violations Reports to Drop Location and decide on builds fate depending on the date"><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" Action="Copy" Destination="[BuildDetail.DropLocation + &quot;\StylecopResults&quot;]" DisplayName="RoboCopy Stylecop Result to Drop Location" Files="StyleCopViolations*.xml" LogExceptionStack="True" Source="[SourcesDirectory]" TreatWarningsAsErrors="False" /><If Condition="[DateTime.Today &gt; StylecopFailureStartDate]" DisplayName="If Today's date is greater than the Styelcop end date supplied at build definition"><If.Then><If Condition="[StyleCopFailFlag]" DisplayName="Fail Build If Stylecop violations are reported and if Stylecop scan is enabled"><If.Then><Sequence><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Stylecop grace period ended on: &quot; + StylecopFailureStartDate.ToShortDateString()]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><mtbwa:WriteBuildError Message="[&quot;ERROR: Stylecop violations reported. Total number of stylecop violations reported = &quot; + TotalStylecopViolationsCount.ToString()]" /><mtbwa:SetBuildProperties DisplayName="Set Build.Status = Failed" PropertiesToSet="Status" Status="[BuildStatus.Failed]" /><mtbwa:WriteCustomSummaryInformation DisplayName="Stylecop CustomSummary" Message="[&quot;Total number of stylecop violations reported: &quot; + TotalStylecopViolationsCount.ToString() + &quot;\n&quot; +&#xA;&quot;Stylecop grace period ended on: &quot; + StylecopFailureStartDate.ToShortDateString()]" SectionDisplayName="Stylecop" SectionKey="CodeQuality" SectionPriority="175" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><Throw Exception="[New Exception(&quot;Build Failed Due To Stylecop Violations&quot;)]" /></Sequence></If.Then><If.Else><mtbwa:WriteCustomSummaryInformation DisplayName="Stylecop CustomSummary" Message="[&quot;Total number of stylecop violations reported: &quot; + TotalStylecopViolationsCount.ToString()]" SectionDisplayName="Stylecop" SectionKey="CodeQuality" SectionPriority="175" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></If.Then><If.Else><If Condition="[StyleCopFailFlag]" DisplayName="Stylecop grace period not crossed - Continue the build on stylecop violations and if Stylecop scan is enabled"><If.Then><Sequence><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Stylecop grace period ends on: &quot; + StylecopFailureStartDate.ToShortDateString()]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><mtbwa:WriteCustomSummaryInformation DisplayName="Stylecop CustomSummary" Message="[&quot;Total number of stylecop violations reported: &quot; + TotalStylecopViolationsCount.ToString() + Environment.NewLine +&#xA;&quot;Stylecop grace period ends on: &quot; + StylecopFailureStartDate.ToShortDateString()]" SectionDisplayName="Stylecop" SectionKey="CodeQuality" SectionPriority="175" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><mtbwa:WriteBuildWarning Message="[&quot;WARNING: Stylecop violations reported. Total number of stylecop violations reported = &quot; + TotalStylecopViolationsCount.ToString()]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></Sequence></If.Then><If.Else><mtbwa:WriteCustomSummaryInformation DisplayName="Stylecop CustomSummary" Message="[&quot;Total number of stylecop violations reported: &quot; + TotalStylecopViolationsCount.ToString()]" SectionDisplayName="Stylecop" SectionKey="CodeQuality" SectionPriority="175" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></If.Else></If></Sequence></If.Then><If.Else><mtbwa:WriteCustomSummaryInformation DisplayName="Stylecop CustomSummary" Message="[&quot;Stylecop scan was disabled for this build&quot; + &quot;\n&quot; +&#xA;&quot;Stylecop grace period ends on: &quot; + StylecopFailureStartDate.ToShortDateString()]" SectionDisplayName="Stylecop" SectionKey="CodeQuality" SectionPriority="175" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If><Sequence DisplayName="Post Build Sequence"><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="Check if IsNotNull - PreBuildProjects" Result="[PostBuildProjectsExist]" Value="[PostBuildProjects]" /><If Condition="[PostBuildProjectsExist]"><If.Then><Sequence><ForEach x:TypeArguments="x:String" DisplayName="ForEach Project Under PostBuildProjects" Values="[PostBuildProjects]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="project" /></ActivityAction.Argument><If Condition="[project.Contains(&quot;.&quot;)]" DisplayName="Check if Post Build projects has content - Has atleast a &quot;.&quot; in it"><If.Then><Sequence DisplayName="Post Build  Activities"><mtbwa:ConvertWorkspaceItem DisplayName="Convert Server Path to Local Path" mtbwt1:BuildTrackingParticipant.Importance="Low" Input="[project]" Result="[localPostBuildProject]" Workspace="[Workspace]" /><mtbwa:MSBuild AllowUntrustedCertificate="{x:Null}" CreatePackageOnPublish="{x:Null}" DeployOnBuild="{x:Null}" CommandLineArguments="[String.Format(&quot;/p:SkipInvalidConfigurations=true /p:BuildNumber={1} /p:BuildDropPath={4}{2}{4} /p:CompiledOutputFilePath={4}{3}{4} /p:CompiledOutputListExe={5} /p:NugetVersionToBeUsed={6} /p:Configuration={7} /p:Platform={4}{8}{4} {9} {0}&quot;, PostMSBuildArguments, BuildDetail.BuildNumber, BuildDetail.DropLocation, CompileOutputXml, &quot;&quot;&quot;&quot;, CompiledOutputListExe, NugetVersionToBeUsed, platformConfiguration.Configuration, platformConfiguration.Platform, AdditionalMSBuildArguments)]" Configuration="[platformConfiguration.Configuration]" DisplayName="Run MSBuild for Post Build Project" GenerateVSPropsFile="True" LogFileDropLocation="[logFileDropLocation]" Platform="[platformConfiguration.Platform]" Project="[localPostBuildProject]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" ToolPath="[MSBuildToolsPath]" ToolPlatform="[MSBuildPlatform]" Verbosity="[Verbosity]" /></Sequence></If.Then><If.Else><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="No valid post build project provided at build definition" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></ActivityAction></ForEach></Sequence></If.Then></If></Sequence><If Condition="[canFortify]" DisplayName="If Fortify Scan Request"><If.Then><Sequence DisplayName="Fortify Scan Request"><Sequence.Variables><Variable x:TypeArguments="x:Boolean" Name="FortifyExemptExists" /></Sequence.Variables><mtbwa:DeleteDirectory Directory="[FortifySharedDir]" DisplayName="Clean up FortifySharedDir" /><If Condition="[ExcludeObjFromFortify]" DisplayName="Check If Obj Folder Should Be Excluded From Fortify Scan"><If.Then><mtbwa:InvokeProcess Arguments="[&quot; /C Robocopy &quot; + &quot;&quot;&quot;&quot; + SourcesDirectory + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + FortifySharedDir + &quot;&quot;&quot;&quot; + &quot; /MIR /XD obj&quot;]" DisplayName="Invoke Process To Robocopy SourceDir to FortifyScanDir Excluding Obj Folder" FileName="C:\windows\system32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(&quot;Robocopy for Copying SourcesDir to FortifyScanDir Failed. sourcesdir -&gt;&quot; + SourcesDirectory + &quot; fortifydir&quot; + FortifySharedDir + &quot; errors -&gt; &quot; + errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="RoboCopy succeeded with Excluding Obj Folder" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then><If.Else><mtbwa:CopyDirectory Destination="[FortifySharedDir]" DisplayName="Copy Sources Directory to Fortify shared path" Source="[SourcesDirectory]" /></If.Else></If><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="Check if files/folders to be exempted from Fortify scan exists" Result="[FortifyExemptExists]" Value="[FortifyExemptList]" /><If Condition="[FortifyExemptExists]"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[FortifyExemptList]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><mtbwa:DeleteDirectory Directory="[String.Format(&quot;{0}\{1}&quot;, FortifySharedDir, item)]" DisplayName="DeleteDirectory From Fortify Shared Directory" /></ActivityAction></ForEach></If.Then></If><h:httpRequestTest DisplayName="Remotely Trigger Fortify Jenkins Job" FortifyURL="[FortifyURL]" /></Sequence></If.Then></If><Sequence DisplayName="Output-Folder-Per-Project - Installer projects"><Sequence.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="CompiledMSIsBinaries" /><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="CompiledMSIsSources" /><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="CompiledCabBinaries" /></Sequence.Variables><mtbwa:FindMatchingFiles DisplayName="Find Project files *.wixproj" MatchPattern="[IO.Path.Combine(SourcesDirectory, &quot;**\*.wixproj&quot;)]" Result="[wixprojects]" /><ForEach x:TypeArguments="x:String" DisplayName="Output-Folder Sequence *.wixproj" Values="[wixprojects]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="wixitem" /></ActivityAction.Argument><Sequence><Sequence.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="DLLFiles" /></Sequence.Variables><mtbwa:CreateDirectory Directory="[Path.Combine(BinariesDirectory, platformConfiguration.Configuration, Path.GetFileNameWithoutExtension(wixitem))]" DisplayName="CreateDirectory per project" /><mtbwa:CopyDirectory Destination="[Path.Combine(BinariesDirectory, platformConfiguration.Configuration, Path.GetFileNameWithoutExtension(wixitem))]" DisplayName="Copy from Sources to Binaries" Source="[Path.Combine(SourcesDirectory, Path.GetDirectoryName(wixitem), &quot;bin&quot;)]" /><mtbwa:FindMatchingFiles DisplayName="Find Project files *.msi in Binaries Directory" MatchPattern="[IO.Path.Combine(BinariesDirectory, platformConfiguration.Configuration, Path.GetFileNameWithoutExtension(wixitem), &quot;**\*.msi&quot;)]" Result="[CompiledMSIsBinaries]" /><mtbwa:FindMatchingFiles MatchPattern="[IO.Path.Combine(BinariesDirectory, platformConfiguration.Configuration, Path.GetFileNameWithoutExtension(wixitem), &quot;**\*.cab&quot;)]" Result="[CompiledCabBinaries]" /><If Condition="[Directory.EnumerateFiles(Path.GetDirectoryName(wixitem), &quot;*FxCopAnalysisOutput.xml&quot;).Any()]" DisplayName="Check if FxCopAnalysisOutput xml Exists"><If.Then><Sequence DisplayName="Sequence"><Sequence.Variables><Variable x:TypeArguments="x:Int32" Default="0" Name="FxcopErrorsCurrentCount" /><Variable x:TypeArguments="x:Int32" Default="0" Name="FxcopCriticalErrorsCurrentCount" /></Sequence.Variables><mtbwa:InvokeProcess Arguments="[&quot;/C findstr /R /N &quot; + &quot;&quot;&quot;&quot; + &quot;^.*&lt;Issue.*Level=.*Error.*$&quot; + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + Path.GetDirectoryName(wixitem) + &quot;\*FxCopAnalysisOutput.xml&quot; + &quot;&quot;&quot;&quot; + &quot; | find /c &quot; + &quot;&quot;&quot;&quot; + &quot;:&quot; + &quot;&quot;&quot;&quot;]" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign DisplayName="Find number of FxCop errors"><Assign.To><OutArgument x:TypeArguments="x:Int32">[FxcopErrorsCurrentCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[Integer.Parse(stdOutput)]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:InvokeProcess Arguments="[&quot;/C findstr /R /N &quot; + &quot;&quot;&quot;&quot; + &quot;^.*&gt;CriticalError&lt;/MessageLevel&gt;.*$&quot; + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + Path.GetDirectoryName(wixitem) + &quot;\*FxCopAnalysisOutput.xml&quot; + &quot;&quot;&quot;&quot; + &quot; | find /c &quot; + &quot;&quot;&quot;&quot; + &quot;:&quot; + &quot;&quot;&quot;&quot;]" FileName="C:\Windows\System32\cmd.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign><Assign.To><OutArgument x:TypeArguments="x:Int32">[FxcopCriticalErrorsCurrentCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[Integer.Parse(stdOutput)]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><Assign DisplayName="Add up TotalFxCopErrorsCount"><Assign.To><OutArgument x:TypeArguments="x:Int32">[TotalFxCopErrorsCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[TotalFxCopErrorsCount + FxCopErrorsCurrentCount]</InArgument></Assign.Value></Assign><Assign DisplayName="Add up TotalFxCopCriticalErrorsCount"><Assign.To><OutArgument x:TypeArguments="x:Int32">[TotalFxCopCriticalErrorsCount]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[TotalFxCopCriticalErrorsCount + FxcopCriticalErrorsCurrentCount]</InArgument></Assign.Value></Assign></Sequence></If.Then></If><If Condition="[1 &gt; 2]"><If.Then><Sequence><ForEach x:TypeArguments="x:String" DisplayName="ForEach .msi in Binaries Directory" Values="[CompiledMSIsBinaries]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><If Condition="[Not Build_Type = CustomDropDownList.BuildType.Release]" DisplayName="Check if the build type is release"><If.Then><Sequence><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C xcopy /I /Y {0}{1}{0} {0}{2}\AutoDeploy\{0}&quot;, &quot;&quot;&quot;&quot;, Path.GetFullPath(item), BinariesDirectory)]" DisplayName="Copy MSI to AutoDeploy folder" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C move {0}{1}{0} {0}{2}\{3}.{4}.{5}.{6}-{7}{8}.msi{0}&quot;, &quot;&quot;&quot;&quot;, Path.GetFullPath(item), Path.GetDirectoryName(item), Path.GetFileNameWithoutExtension(item), MajorVersion, MinorVersion, PatchVersion, Build_Type, PaddedBuildRevision)]" DisplayName="Rename MSI with build version stamp in the name" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Then><If.Else><Sequence><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C xcopy /I /Y {0}{1}{0} {0}{2}\AutoDeploy\{0}&quot;, &quot;&quot;&quot;&quot;, Path.GetFullPath(item), BinariesDirectory)]" DisplayName="Copy MSI to AutoDeploy folder" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C rename {0}{1}{0} {0}{2}.{3}.{4}.{5}.msi{0}&quot;, &quot;&quot;&quot;&quot;, Path.GetFullPath(item), Path.GetFileNameWithoutExtension(item), MajorVersion, MinorVersion, PatchVersion)]" DisplayName="Rename MSI with build version stamp in the name" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Else></If></ActivityAction></ForEach><ForEach x:TypeArguments="x:String" DisplayName="ForEach Cab File in Binaries Directory" Values="[CompiledCabBinaries]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><If Condition="[Not Build_Type = CustomDropDownList.BuildType.Release]" DisplayName="Check if build type is release"><If.Then><Sequence><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C xcopy /I /Y {0}{1}{0} {0}{2}\AutoDeploy\{0}&quot;, &quot;&quot;&quot;&quot;, Path.GetFullPath(item), BinariesDirectory)]" DisplayName="Copy CAB to AutoDeploy folder" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Then><If.Else><Sequence><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C xcopy /I /Y {0}{1}{0} {0}{2}\AutoDeploy\{0}&quot;, &quot;&quot;&quot;&quot;, Path.GetFullPath(item), BinariesDirectory)]" DisplayName="Copy CAB to AutoDeploy folder" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></Sequence></If.Else></If></ActivityAction></ForEach><mtbwa:FindMatchingFiles DisplayName="Find Project files *.msi in Sources Directory" MatchPattern="[IO.Path.Combine(Path.GetDirectoryName(wixitem), &quot;**\*.msi&quot;)]" Result="[CompiledMSIsSources]" /><ForEach x:TypeArguments="x:String" DisplayName="ForEach .msi in SourcesDirectory" Values="[CompiledMSIsSources]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><If Condition="[Not Build_Type = CustomDropDownList.BuildType.Release]" DisplayName="Check if the build type is release"><If.Then><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C copy /Y {0}{1}{0} {0}{2}\{3}.{4}.{5}.{6}-{7}{8}.msi{0}&quot;, &quot;&quot;&quot;&quot;, item, Path.GetDirectoryName(item), Path.GetFileNameWithoutExtension(item), MajorVersion, MinorVersion, PatchVersion, Build_Type, PaddedBuildRevision)]" DisplayName="Copy Renamed MSI from Binaries Directory to the Original Location of the MSI in Sources Directory" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then><If.Else><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C copy /Y {0}{1}{0} {0}{2}\{3}.{4}.{5}.{6}.msi{0}&quot;, &quot;&quot;&quot;&quot;, item, Path.GetDirectoryName(item), Path.GetFileNameWithoutExtension(item), MajorVersion, MinorVersion, PatchVersion)]" DisplayName="Copy Renamed MSI from Binaries Directory to the Original Location of the MSI in Sources Directory" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Else></If></ActivityAction></ForEach></Sequence></If.Then></If></Sequence></ActivityAction></ForEach></Sequence></Sequence></ActivityAction></ForEach><If Condition="[BuildDetail.CompilationStatus = Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Unknown]" DisplayName="If CompilationStatus = Unknown" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:SetBuildProperties CompilationStatus="[Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Succeeded]" DisplayName="Set CompilationStatus to Succeeded" mtbwt1:BuildTrackingParticipant.Importance="Low" PropertiesToSet="CompilationStatus" /></If.Then></If><If Condition="[BuildDetail.TestStatus = Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Unknown]" DisplayName="If TestStatus = Unknown" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:SetBuildProperties DisplayName="Set TestStatus to Succeeded" mtbwt1:BuildTrackingParticipant.Importance="Low" PropertiesToSet="TestStatus" TestStatus="[Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Succeeded]" /></If.Then></If><If Condition="[treatTestFailureAsBuildFailure And (BuildDetail.TestStatus = Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Failed)]" DisplayName="If TreatTestFailureAsBuildFailure And (TestStatus = Failed)" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:SetBuildProperties DisplayName="Set Status to Failed" mtbwt1:BuildTrackingParticipant.Importance="Low" PropertiesToSet="Status" Status="[Microsoft.TeamFoundation.Build.Client.BuildStatus.Failed]" /></If.Then></If></Sequence></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="compilationExceptionArgument" /></ActivityAction.Argument><Assign x:TypeArguments="s:Exception" DisplayName="Save the Compilation Exception" mtbwt1:BuildTrackingParticipant.Importance="None" To="[compilationException]" Value="[compilationExceptionArgument]" /></ActivityAction></Catch></TryCatch.Catches></TryCatch><If Condition="[AssociateChangesetsAndWorkItems]" DisplayName="If AssociateChangesetsAndWorkItems" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><If Condition="[CreateLabel And (WorkspaceMappingCheckExitCode = 0)]" DisplayName="If CreateLabel and AssociateChangesetsAndWorkItems" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:InvokeForReason DisplayName="Associate Changesets and Work Items for non-Shelveset Builds" Reason="Manual, IndividualCI, BatchedCI, Schedule, ScheduleForced, UserCreated"><mtbwa:AssociateChangesetsAndWorkItems CurrentLabel="[String.Format(&quot;{0}@$/{1}&quot;, BuildDetail.BuildNumber, BuildDetail.BuildDefinition.TeamProject)]" DisplayName="Associate Changesets and Work Items" Result="[associatedChangesets]" /></mtbwa:InvokeForReason></If.Then><If.Else><mtbwa:WriteBuildWarning DisplayName="Write Associate Changesets and Work Items Warning" Message="Cannot Associate Changesets and Work Items because the Label Sources option is set to False." mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Else></If></If.Then></If></Parallel><If Condition="[Not compilationException Is Nothing]" DisplayName="If a Compilation Exception Occurred" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Throw DisplayName="Rethrow Compilation Exception" Exception="[compilationException]" mtbwt1:BuildTrackingParticipant.Importance="Low" /></If.Then></If><Parallel DisplayName="Get Impacted Tests, Index Sources and Publish Symbols"><If Condition="[PerformTestImpactAnalysis]" DisplayName="If PerformTestImpactAnalysis" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><Sequence DisplayName="Get Impacted Tests" mtbwt1:BuildTrackingParticipant.Importance="Low"><Sequence.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="assemblies" /></Sequence.Variables><mtbwa:FindMatchingFiles DisplayName="Find Build Outputs" mtbwt1:BuildTrackingParticipant.Importance="Low" MatchPattern="[String.Format(&quot;{0}\**\*.dll;{0}\**\*.exe&quot;, BinariesDirectory)]" Result="[assemblies]" /><mttbb1:GetImpactedTests BaselineBuildDropLocation="{x:Null}" CodeChanges="{x:Null}" ImpactedTests="{x:Null}" Assemblies="[assemblies]" AssociatedChangesets="[associatedChangesets]" BinariesRoot="[BinariesDirectory]" Build="[BuildDetail]" DisplayName="Get Impacted Tests" Workspace="[Workspace]" /></Sequence></If.Then></If><If Condition="[SourceAndSymbolServerSettings.IndexSources Or SourceAndSymbolServerSettings.HasSymbolStorePath]" DisplayName="If SourceAndSymbolServerSettings.IndexSources Or SourceAndSymbolServerSettings.HasSymbolStorePath" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:InvokeForReason DisplayName="Index Sources and Publish Symbols for Triggered Builds" Reason="Triggered"><mtbwa:InvokeForReason.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="symbolFiles" /></mtbwa:InvokeForReason.Variables><mtbwa:FindMatchingFiles DisplayName="Find Symbol Files" mtbwt1:BuildTrackingParticipant.Importance="Low" MatchPattern="[String.Format(&quot;{0}\**\*.pdb&quot;, SourcesDirectory)]" Result="[symbolFiles]" /> <If Condition="[SourceAndSymbolServerSettings.IndexSources]" DisplayName="If SourceAndSymbolServerSettings.IndexSources" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><TryCatch DisplayName="Try Index Sources" mtbwt1:BuildTrackingParticipant.Importance="Low"><TryCatch.Try><mtbwa:IndexSources DisplayName="Index Sources" FileList="[symbolFiles]" /></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="exception" /></ActivityAction.Argument><mtbwa:WriteBuildError DisplayName="Write Indexing Sources Error" Message="[exception.Message]" /></ActivityAction></Catch></TryCatch.Catches></TryCatch></If.Then></If> <If Condition="[SourceAndSymbolServerSettings.HasSymbolStorePath]" DisplayName="If SourceAndSymbolServerSettings.HasSymbolStorePath" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><TryCatch DisplayName="Try Publish Symbols" mtbwt1:BuildTrackingParticipant.Importance="Low"><TryCatch.Try><mtbwa:SharedResourceScope DisplayName="Synchronize Access to Symbol Store" mtbwt1:BuildTrackingParticipant.Importance="Low" MaxExecutionTime="[TimeSpan.Zero]" MaxWaitTime="[New TimeSpan(1, 0, 0)]" ResourceName="[SourceAndSymbolServerSettings.SymbolStorePath]"><mtbwa:CreateDirectory Directory="[String.Format(&quot;{0}\{1}&quot;, SourceAndSymbolServerSettings.SymbolStorePath, BuildDetail.BuildNumber)]" DisplayName="CreateBuildSpecificSymbol Directory" /> <mtbwa:PublishSymbols DisplayName="Publish Symbols" FileList="[symbolFiles]" ProductName="[BuildDetail.BuildDefinition.Name]" StorePath="[String.Format(&quot;{0}\{1}&quot;, SourceAndSymbolServerSettings.SymbolStorePath, BuildDetail.BuildNumber)]" Version="[BuildDetail.BuildNumber]" /> <mtbwa:WriteCustomSummaryInformation DisplayName="CustomSummary - Build Output Details - Symbol Server" Message="[&quot;\n&quot; + &quot;Symbols Server: &quot; + SourceAndSymbolServerSettings.SymbolStorePath + &quot;\&quot; + BuildDetail.BuildNumber]" SectionDisplayName="Build Output" SectionKey="BuildOutput" SectionPriority="160" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></mtbwa:SharedResourceScope></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="exception" /></ActivityAction.Argument><mtbwa:WriteBuildError DisplayName="Write Publishing Symbols Error" Message="[exception.Message]" /></ActivityAction></Catch></TryCatch.Catches></TryCatch></If.Then></If></mtbwa:InvokeForReason></If.Then></If></Parallel><If Condition="[SilverLightTest]" DisplayName="If SilverLight Tests need to be run"><If.Then><Sequence DisplayName="Run Silverlight Tests"><Sequence.Variables><Variable x:TypeArguments="x:String" Default="[String.Format(&quot;{0}C:\Program Files (x86)\Statlight_v1.6\StatLight.exe{0}&quot;, &quot;&quot;&quot;&quot;)]" Name="StatLightExe" /></Sequence.Variables><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[SilverlightTestsXaps]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><mtbwa:FindMatchingFiles DisplayName="FindMatchingFiles - .xap files" MatchPattern="[String.Format(&quot;{0}\**\{1}&quot;, BinariesDirectory, item)]" Result="[XAPfile]" /></ActivityAction></ForEach><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[XAPfile]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="xap" /></ActivityAction.Argument><Sequence><mtbwa:WriteBuildMessage DisplayName="WriteBuildMessage - xap" Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot; -x=&quot; + xap + &quot; --ReportOutputFile=&quot; + Path.GetDirectoryName(xap) + &quot;\&quot; + TestResultFile + &quot; --ReportOutputFileType=TRX&quot;]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><mtbwa:InvokeProcess Arguments="[&quot; -x=&quot; + xap + &quot; --ReportOutputFile=&quot; + Path.GetDirectoryName(xap) + &quot;\&quot; + TestResultFile + &quot; --ReportOutputFileType=TRX&quot;]" DisplayName="Invoke Statlight" FileName="[StatLightExe]" Result="[StatLightExitCode]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage DisplayName="WriteBuildMessage - Statlight" Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[StatLightExitCode = 1]" DisplayName="Fail Build If Statlight Fails"><If.Then><Sequence><mtbwa:WriteBuildError Message="Error: Test Failure - Silverlight Test Failed" /><mtbwa:SetBuildProperties DisplayName="Set Build.Status = Failed&quot;" PropertiesToSet="Status" Status="[BuildStatus.Failed]" /></Sequence></If.Then></If></Sequence></ActivityAction></ForEach></Sequence></If.Then></If><If Condition="[BuildDetail.CompilationStatus = Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus.Succeeded]" DisplayName="If Compilation status is succeeded"><If.Then><If Condition="[UnitTestsCheck = True]" DisplayName="Check if UnitTestsCheck was determined to be true"><If.Then><Sequence DisplayName="Sandcastle, NuGet and build completion email sequence"><Sequence.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="MsiFiles" /><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="CabFiles" /><Variable x:TypeArguments="x:Boolean" Name="NuspecExists" /><Variable x:TypeArguments="x:String" Default="NugetPkgs" Name="NugetPackages" /><Variable x:TypeArguments="x:String" Default="[System.IO.Path.Combine(BuildDropLatestFoldersRootPath, &quot;SandcastleDocuments&quot;)]" Name="SandcastleLatest" /><Variable x:TypeArguments="x:String" Default="[System.IO.Path.Combine(BuildDropLatestFoldersRootPath, &quot;NugetPackages&quot;)]" Name="NugetLatest" /><Variable x:TypeArguments="x:String" Default="[System.IO.Path.Combine(BuildDropLatestFoldersRootPath, &quot;Installers&quot;)]" Name="InstallerLatest" /></Sequence.Variables><Sequence DisplayName="Sandcastle Sequence"><mtbwa:FindMatchingFiles DisplayName="FindMatchingFiles - *.chm" MatchPattern="[String.Format(&quot;{0}\**\*.chm&quot;, SourcesDirectory)]" Result="[ChmFiles]" /><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[ChmFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="chmFile" /></ActivityAction.Argument><Sequence><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[String.Format(&quot;{1}\{2}&quot;, &quot;&quot;&quot;&quot;, BinariesDirectory, &quot;SandcastleDocs&quot;)]" DisplayName="RoboCopy Sandcastle documents to Binaries Directory" Files="*.chm" LogExceptionStack="True" Source="[Path.GetDirectoryName(chmFile)]" /><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[SandcastleLatest + &quot;\&quot; + BuildDetail.BuildNumber]" DisplayName="RoboCopy Sandcastle documents to SandcastleLatest folder" Files="*.chm" LogExceptionStack="True" Source="[Path.GetDirectoryName(chmFile)]" /><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[SourcesDirectory + &quot;\SandcastleLatest&quot;]" DisplayName="RoboCopy Sandcastle documents to SandcastleLatest folder at SourcesDirectory - Required for nuget packaging" Files="*.chm" LogExceptionStack="True" Source="[Path.GetDirectoryName(chmFile)]" /></Sequence></ActivityAction></ForEach><If Condition="[Directory.Exists(SandcastleLatest + &quot;\&quot; + BuildDetail.BuildNumber)]" DisplayName="Check whether sandcastle documents have been generated and copied to sandcastle latest folder"><If.Then><mtbwa:WriteCustomSummaryInformation DisplayName="CustomSummary - Build Output Details - Sandcastle" Message="[&quot;Sandcastle Documents: &quot; + SandcastleLatest + &quot;\&quot; + BuildDetail.BuildNumber]" SectionDisplayName="Build Output" SectionKey="BuildOutput" SectionPriority="160" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Then></If></Sequence><Sequence DisplayName="Copy .msi and .cab to Binaries Directory and to latest folder"><mtbwa:FindMatchingFiles DisplayName="FindMatchingFiles - .msi" MatchPattern="[String.Format(&quot;{0}\**\*{1}.{2}.{3}*.msi&quot;, BinariesDirectory, MajorVersion, MinorVersion, PatchVersion)]" Result="[MsiFiles]" /><mtbwa:FindMatchingFiles DisplayName="FindMatchingFiles - .cab" MatchPattern="[String.Format(&quot;{0}\**\*.cab&quot;, BinariesDirectory)]" Result="[CabFiles]" /><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; - msi" Values="[MsiFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="msi" /></ActivityAction.Argument><Sequence><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[InstallerLatest + &quot;\&quot; + BuildDetail.BuildNumber]" DisplayName="RoboCopy .msi to InstallerLatest" Files="*.msi" LogExceptionStack="True" Source="[Path.GetDirectoryName(msi)]" /><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[BinariesDirectory + &quot;\Installers&quot;]" DisplayName="RoboCopy .msi to Binaries Directory" Files="*.msi" LogExceptionStack="True" Source="[Path.GetDirectoryName(msi)]" /></Sequence></ActivityAction></ForEach><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; - cab" Values="[CabFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="cab" /></ActivityAction.Argument><Sequence><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[InstallerLatest + &quot;\&quot; + BuildDetail.BuildNumber]" DisplayName="RoboCopy .cab to InstallerLatest" Files="*.cab" LogExceptionStack="True" Source="[Path.GetDirectoryName(cab)]" /><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[BinariesDirectory + &quot;\Installers&quot;]" DisplayName="RoboCopy .cab to BinariesDirectory" Files="*.cab" LogExceptionStack="True" Source="[Path.GetDirectoryName(cab)]" /></Sequence></ActivityAction></ForEach><If Condition="[Directory.Exists(InstallerLatest + &quot;\&quot; + BuildDetail.BuildNumber)]" DisplayName="Check whether installers are created and copied to installer latest folder"><If.Then><mtbwa:WriteCustomSummaryInformation DisplayName="CustomSummary - Build Output Details - Installers" Message="[&quot;Installers: &quot; + InstallerLatest + &quot;\&quot; + BuildDetail.BuildNumber]" SectionDisplayName="Build Output" SectionKey="BuildOutput" SectionPriority="160" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Then></If></Sequence><Sequence DisplayName="Copy .msp and .msm to Binaries Directory"><Sequence.Variables><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="MsmFiles" /><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="MspFiles" /></Sequence.Variables><mtbwa:FindMatchingFiles DisplayName="FindMatchingFiles - .msp" MatchPattern="[String.Format(&quot;{0}\**\*.msp&quot;, SourcesDirectory)]" Result="[MspFiles]" /><mtbwa:FindMatchingFiles DisplayName="FindMatchingFiles - .msm" MatchPattern="[String.Format(&quot;{0}\**\*.msm&quot;, SourcesDirectory)]" Result="[MsmFiles]" /><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; - msp" Values="[MspFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="msp" /></ActivityAction.Argument><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[BinariesDirectory + &quot;\MSP-Files&quot;]" DisplayName="RoboCopy .msp to Binaries Directory" Files="*.msp" LogExceptionStack="True" Source="[Path.GetDirectoryName(msp)]" /></ActivityAction></ForEach><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; - msm" Values="[MsmFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="msm" /></ActivityAction.Argument><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[BinariesDirectory + &quot;\MSM-Files&quot;]" DisplayName="RoboCopy .msm to Binaries Directory" Files="*.msm" LogExceptionStack="True" Source="[Path.GetDirectoryName(msm)]" /></ActivityAction></ForEach></Sequence><If Condition="[GenerateNuget]" DisplayName="If Generate Nuget is True"><If.Then><Sequence DisplayName="Nuget Sequence"><Sequence.Variables><Variable x:TypeArguments="x:String" Default="[String.Format(&quot;{0}{1}\Build\NuGet.exe{0}&quot;, &quot;&quot;&quot;&quot;, SourcesDirectory)]" Name="NuGet" /><Variable x:TypeArguments="x:String" Default="http://nuget.rd.allscripts.com/" Name="NugetBaseUrl" /><Variable x:TypeArguments="x:Int32" Default="7" Name="PackagesToRetain" /></Sequence.Variables><If Condition="[System.IO.File.Exists(NuGet)]" DisplayName="Check if nuget.exe exists at SourcesDirectory\Build folder "><If.Else><Assign DisplayName="Use NuGet.exe available on build server at C:\Software\Nuget directory"><Assign.To><OutArgument x:TypeArguments="x:String">[NuGet]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">C:\SOFTWARE\NuGet\NuGet.exe</InArgument></Assign.Value></Assign></If.Else></If><TryCatch><TryCatch.Try><mtbwa:CreateDirectory Directory="[Path.Combine(SourcesDirectory, NugetPackages)]" DisplayName="Create NugetPackages Directory" /></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="exception" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[exception.ToString()]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></Catch></TryCatch.Catches></TryCatch><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="Check if Nuspec List is not null " Result="[NuspecExists]" Value="[NuspecList]" /><If Condition="[NuspecExists]" DisplayName="If Nuspec List is not null"><If.Then><If Condition="[Not Build_Type = CustomDropDownList.BuildType.Release]"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; in NuspecList" Values="[NuspecList]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="nuspec" /></ActivityAction.Argument><Sequence><mtbwa:InvokeProcess Arguments="[String.Format(&quot;pack {8}{0}\{1}{8} -Verbosity detailed -OutputDirectory {8}{0}\{2}{8} -Version {3}.{4}.{5}-{6}{7}&quot;, SourcesDirectory, nuspec, NugetPackages, MajorVersion, MinorVersion, PatchVersion, Build_Type, PaddedBuildRevision, &quot;&quot;&quot;&quot;)]" DisplayName="Generate Nuget Packages" FileName="[NuGet]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[System.IO.Path.GetExtension(SourcesDirectory + &quot;\&quot; + nuspec) = &quot;.nuspec&quot;]" DisplayName="Check if spec file is a &quot;.nuspec&quot;"><If.Then><n:NupkgDeletion DeleteFromRepositorySource="[NugetBaseUrl + NugetRepositoryURL]" PackagesToRetain="[PackagesToRetain]" PrereleaseRepo="[NugetBaseUrl + NugetRepositoryURL + &quot;/nuget/&quot;]" RepositoryApi="[NugetAPIkey]" nuspecFile="[String.Format(&quot;{0}\{1}&quot;, SourcesDirectory, nuspec)]" /></If.Then></If></Sequence></ActivityAction></ForEach></If.Then><If.Else><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; in NuspecList" Values="[NuspecList]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="nuspec" /></ActivityAction.Argument><mtbwa:InvokeProcess Arguments="[String.Format(&quot;pack {6}{0}\{1}{6} -Verbosity detailed -OutputDirectory {6}{0}\{2}{6} -Version {3}.{4}.{5}&quot;, SourcesDirectory, nuspec, NugetPackages, MajorVersion, MinorVersion, PatchVersion, &quot;&quot;&quot;&quot;)]" DisplayName="Generate Nuget Packages" FileName="[NuGet]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></ActivityAction></ForEach></If.Else></If></If.Then></If><mtbwe1:IsNotNull x:TypeArguments="s:String[]" DisplayName="Check if Nuspec Symbol List is not null " Result="[NuspecExists]" Value="[NuspecListSymbol]" /><If Condition="[NuspecExists]" DisplayName="If Nuspec Symbol List is not null"><If.Then><If Condition="[Not Build_Type = CustomDropDownList.BuildType.Release]"><If.Then><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; in NuspecList" Values="[NuspecListSymbol]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="nuspec" /></ActivityAction.Argument><Sequence><mtbwa:InvokeProcess Arguments="[String.Format(&quot;pack {8}{0}\{1}{8} -Verbosity detailed -Symbols -OutputDirectory {8}{0}\{2}{8} -Version {3}.{4}.{5}-{6}{7}&quot;, SourcesDirectory, nuspec, NugetPackages, MajorVersion, MinorVersion, PatchVersion, Build_Type, PaddedBuildRevision, &quot;&quot;&quot;&quot;)]" DisplayName="Generate Nuget Packages" FileName="[NuGet]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[System.IO.Path.GetExtension(SourcesDirectory + &quot;\&quot; + nuspec) = &quot;.nuspec&quot;]" DisplayName="Check if spec file is a &quot;.nuspec&quot;"><If.Then><n:NupkgDeletion DeleteFromRepositorySource="[NugetBaseUrl + NugetRepositoryURL]" PackagesToRetain="[PackagesToRetain]" PrereleaseRepo="[NugetBaseUrl + NugetRepositoryURL + &quot;/nuget/&quot;]" RepositoryApi="[NugetAPIkey]" nuspecFile="[String.Format(&quot;{0}\{1}&quot;, SourcesDirectory, nuspec)]" /></If.Then></If></Sequence></ActivityAction></ForEach></If.Then><If.Else><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt; in NuspecList" Values="[NuspecListSymbol]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="nuspec" /></ActivityAction.Argument><mtbwa:InvokeProcess Arguments="[String.Format(&quot;pack {6}{0}\{1}{6} -Verbosity detailed -Symbols -OutputDirectory {6}{0}\{2}{6} -Version {3}.{4}.{5}&quot;, SourcesDirectory, nuspec, NugetPackages, MajorVersion, MinorVersion, PatchVersion, &quot;&quot;&quot;&quot;)]" DisplayName="Generate Nuget Packages" FileName="[NuGet]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></ActivityAction></ForEach></If.Else></If></If.Then></If><mtbwa:InvokeProcess Arguments="[String.Format(&quot;push {0}{1}\{2}\*.nupkg{0} -s {3}\{4}&quot;, &quot;&quot;&quot;&quot;, SourcesDirectory, NugetPackages, NugetLatest, BuildDetail.BuildNumber)]" DisplayName="Push *.nupkg to NugetLatest" FileName="[NuGet]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[ZipNugetPackages]" DisplayName="If Nuget packages are required to be zipped"><If.Then><tac2:Zip ExtractPath="{x:Null}" FailBuildOnError="{x:Null}" Files="{x:Null}" IgnoreExceptions="{x:Null}" MaxOutputSegmentSize="{x:Null}" Password="{x:Null}" RemoveRoot="{x:Null}" TreatWarningsAsErrors="{x:Null}" UseZip64WhenSaving="{x:Null}" Action="Create" CompressPath="[String.Format(&quot;{0}{1}\{2}{0}&quot;, &quot;&quot;&quot;&quot;, SourcesDirectory, NugetPackages)]" CompressionLevel="Default" DisplayName="Zip Nuget Packages" LogExceptionStack="True" ZipFileName="[String.Format(&quot;{0}{1}\{2}.zip{0}&quot;, &quot;&quot;&quot;&quot;, SourcesDirectory, NugetPackages)]" /></If.Then></If><mtbwa:InvokeProcess Arguments="[String.Format(&quot;/C xcopy /E {0}{1}\{2}{0} {0}{3}\{2}\{0}&quot;, &quot;&quot;&quot;&quot;, SourcesDirectory, NugetPackages, BinariesDirectory)]" DisplayName="Copy Nuget Packages To DropLocation" FileName="cmd"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[PublishNugetToRepository]" DisplayName="If Nuget packages are required to be published to the repository"><If.Then><mtbwa:InvokeProcess Arguments="[String.Format(&quot;push {0}{1}\{2}\*.nupkg{0} -s {3}{4}/ {5}&quot;, &quot;&quot;&quot;&quot;, SourcesDirectory, NugetPackages, NugetBaseUrl, NugetRepositoryURL, NugetAPIkey)]" DisplayName="Publish Nuget Packages" FileName="[NuGet]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Then></If><mtbwa:WriteCustomSummaryInformation DisplayName="CustomSummary - Build Output Details - Nuget" Message="[&quot;Nuget Packages: &quot; + NugetLatest + &quot;\&quot; + BuildDetail.BuildNumber]" SectionDisplayName="Build Output" SectionKey="BuildOutput" SectionPriority="160" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></Sequence></If.Then></If></Sequence></If.Then></If></If.Then></If></Sequence></TryCatch.Try></TryCatch> <Sequence DisplayName="Trigger Other Jobs Remotely - Downstream Build And Auto Deployment"><Sequence.Variables><Variable x:TypeArguments="x:Boolean" Name="DownstreamBuildDefinitionTeamProjectExists" /></Sequence.Variables><If Condition="[AutoDeploy And UnitTestsCheck]" DisplayName="Check if Auto Deployment is Enabled AND UnitTestsCheck is determined as True"><If.Then><Sequence DisplayName="Try to Release the Build"><Sequence.Variables><Variable x:TypeArguments="x:Int32" Name="ReleaseBuildExitCode" /><Variable x:TypeArguments="mtc1:TfsTeamProjectCollection" Name="ReleaseBuildTpc" /><Variable x:TypeArguments="x:String" Default="C:\Software\ReleaseManagementBuild\ReleaseManagementBuild.exe" Name="ReleaseManagementBuild" /></Sequence.Variables><mtbwa:DeleteDirectory Directory="[System.IO.Path.Combine(BuildDropBasePath, BuildDetail.TeamProject, BuildBranchType, BuildDetail.BuildDefinition.Name, &quot;Installers&quot;, &quot;Latest&quot;)]" DisplayName="Delete InstallerLatest\Latest folder" /><If Condition="[Directory.Exists(BinariesDirectory + &quot;\AutoDeploy&quot;)]" DisplayName="Check if Auto Deploy folder exists in binaries directory"><If.Then><taf:RoboCopy FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" LogToBuild="{x:Null}" Options="{x:Null}" ReturnCode="{x:Null}" TreatWarningsAsErrors="{x:Null}" Action="Copy" Destination="[System.IO.Path.Combine(BuildDropBasePath, BuildDetail.TeamProject, BuildBranchType, BuildDetail.BuildDefinition.Name, &quot;Installers&quot;, &quot;Latest&quot;)]" DisplayName="RoboCopy MSIs with original name to InstallerLatest\Latest folder" Files="*.*" LogExceptionStack="True" Source="[BinariesDirectory + &quot;\AutoDeploy&quot;]" /></If.Then></If><Sequence DisplayName="Initialize Release Build Variables"><Sequence.Variables><Variable x:TypeArguments="x:Object" Name="ReleaseBuildBinPathObject" /></Sequence.Variables><mtbwa:GetTeamProjectCollection DisplayName="Get Team Project Collection Instance" Result="[ReleaseBuildTpc]" /></Sequence><Sequence DisplayName="Release the Build"><Sequence.Variables><Variable x:TypeArguments="mtbc:IQueuedBuild" Name="DeploymentBuildTriggerStatus" /></Sequence.Variables><If Condition="[1 &lt; 2]"><If.Then><Sequence><Sequence.Variables><Variable x:TypeArguments="x:Boolean" Default="False" Name="AutoDeploymentResult" /></Sequence.Variables><tat:QueueBuild BuildController="[BuildDetail.BuildController()]" BuildDefinition="[BuildDetail.BuildServer.GetBuildDefinition(BuildDetail.TeamProject, CommonDeploymentBuildDefinition)]" BuildServer="[BuildDetail.BuildServer()]" Priority="[Microsoft.TeamFoundation.Build.Client.QueuePriority.High]" ProcessParameters="[Microsoft.TeamFoundation.Build.Workflow.WorkflowHelpers.SerializeProcessParameters(New Dictionary(Of String, Object) From {{&quot;BuildDefinitionToBeDeployed&quot;, BuildDetail.BuildDefinition.Name}, {&quot;BuildNumberToBeDeployed&quot;, BuildDetail.BuildNumber}, {&quot;DeploymentTargetStage&quot;, DeploymentTargetStage}})]" Result="[DeploymentBuildTriggerStatus]" /><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Deployment Build Trigger Status is: &quot; + DeploymentBuildTriggerStatus.Status.ToString]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /><Assign><Assign.To><OutArgument x:TypeArguments="x:Boolean">[AutoDeploymentResult]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Boolean">[DeploymentBuildTriggerStatus.WaitForBuildCompletion(New TimeSpan(TimeSpan.TicksPerMinute), New TimeSpan(TimeSpan.MaxValue.Ticks))]</InArgument></Assign.Value></Assign><If Condition="[AutoDeploymentResult]"><If.Then><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Downstream Build:- &quot; + DeploymentBuildTriggerStatus.BuildDefinition.Name + &quot; completed with status &quot; + DeploymentBuildTriggerStatus.Status.ToString()]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Then><If.Else><Throw Exception="[New Exception(&quot;Deployment Build Definition&quot; + CommonDeploymentBuildDefinition + &quot;failed!&quot;)]" /></If.Else></If></Sequence></If.Then><If.Else><mtbwa:InvokeProcess Arguments="[&quot;start /collection:&quot; + ReleaseBuildTpc.ToString + &quot; /builddefinition:&quot; + &quot;&quot;&quot;&quot; + BuildDetail.TeamProject.ToString + &quot;\&quot; + CommonDeploymentBuildDefinition.ToString + &quot;&quot;&quot;&quot;]" DisplayName="Trigger AutoDeployment BD" FileName="C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TFSbuild.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Message="[&quot;The autodeployment job failed with exception: &quot; + errOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Message="[&quot;The output from the autodeployment: &quot; + stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess></If.Else></If></Sequence><mtbwa:WriteBuildMessage Message="[&quot;AutoDeployment Status is: &quot; + BuildDetail.BuildServer.GetBuildDefinition(BuildDetail.TeamProject, CommonDeploymentBuildDefinition).QueueStatus.ToString()]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></Sequence></If.Then></If><If Condition="[EnableDownstreamBuild And UnitTestsCheck]" DisplayName="Check If Downstreaming Chaining of Build is Enabled AND UnitTestsCheck is determined as True"><If.Then><Sequence><mtbwe1:IsNotNull x:TypeArguments="x:String" DisplayName="Check if DownstreamBuildDefinitionTeamProject Is Not Null" Result="[DownstreamBuildDefinitionTeamProjectExists]" Value="[DownstreamBuildDefinitionTeamProject]" /><If Condition="[DownstreamBuildDefinitionTeamProjectExists]" DisplayName="If DownstreamBuildDefinitionTeamProjectExists"><If.Else><Assign DisplayName="Assign DownstreamBuildDefinitionTeamProject To BuildDetail.TeamProject"><Assign.To><OutArgument x:TypeArguments="x:String">[DownstreamBuildDefinitionTeamProject]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[BuildDetail.TeamProject.ToString()]</InArgument></Assign.Value></Assign></If.Else></If><If Condition="[RunDownstreamBuildsInParallel]" DisplayName="Check If Parallel Run of Downstream Build is Chosen or Sequential Run"><If.Then><ParallelForEach x:TypeArguments="x:String" DisplayName="ParallelForEach Downstream Build Definition Provided" Values="[DownstreamBuildDefinition]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="BldDef" /></ActivityAction.Argument><Sequence DisplayName="Downstreaming Chaining Sequence"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="DownstreamProject" /></Sequence.Variables><tat:GetBuildDefinition BuildDefinitionName="[BldDef]" BuildServer="[BuildDetail.BuildDefinition.BuildServer]" Result="[DownstreamBuildDefn]" TeamProjectName="[DownstreamBuildDefinitionTeamProject]" /><mtbwa:GetTeamProjectCollection Result="[TfsCollectionVar]" /><mtbwa:InvokeProcess Arguments="[&quot;start /collection:&quot; + TfsCollectionVar.ToString + &quot; /builddefinition:&quot; + &quot;&quot;&quot;&quot; + DownstreamBuildDefinitionTeamProject + &quot;\&quot; + DownstreamBuildDefn.Name + &quot;&quot;&quot;&quot;]" DisplayName="Trigger Downstream Build" FileName="C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TFSbuild.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign><Assign.To><OutArgument x:TypeArguments="x:String">[TFSBuildExeOutput]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[stdOutput]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[TFSBuildExeOutput.ToString().Contains(&quot;Succeeded&quot;)]" DisplayName="Check if Queued Build Status is Succeeded"><If.Then><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Downstream build &quot; + &quot;&quot;&quot;&quot; + DownstreamBuildDefinitionTeamProject + &quot;\&quot; + DownstreamBuildDefn.Name + &quot;&quot;&quot;&quot; + &quot; completed successfully&quot;]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Then><If.Else><Throw DisplayName="Throw - Downstream Build Failed" Exception="[New Exception(&quot;Downstream build &quot; + &quot;&quot;&quot;&quot; + DownstreamBuildDefinitionTeamProject + &quot;\&quot; + DownstreamBuildDefn.Name + &quot;&quot;&quot;&quot; + &quot;has FAILED!&quot;)]" /></If.Else></If></Sequence></ActivityAction></ParallelForEach></If.Then><If.Else><ForEach x:TypeArguments="x:String" DisplayName="ForEach Downstream Build Definition Provided" Values="[DownstreamBuildDefinition]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="BldDef" /></ActivityAction.Argument><Sequence DisplayName="Downstreaming Chaining Sequence"><Sequence.Variables><Variable x:TypeArguments="x:String" Name="DownstreamProject" /></Sequence.Variables><tat:GetBuildDefinition BuildDefinitionName="[BldDef]" BuildServer="[BuildDetail.BuildDefinition.BuildServer]" Result="[DownstreamBuildDefn]" TeamProjectName="[DownstreamBuildDefinitionTeamProject]" /><mtbwa:GetTeamProjectCollection Result="[TfsCollectionVar]" /><mtbwa:InvokeProcess Arguments="[&quot;start /collection:&quot; + TfsCollectionVar.ToString + &quot; /builddefinition:&quot; + &quot;&quot;&quot;&quot; + DownstreamBuildDefinitionTeamProject + &quot;\&quot; + DownstreamBuildDefn.Name + &quot;&quot;&quot;&quot;]" DisplayName="Trigger Downstream Build" FileName="C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\TFSbuild.exe"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><Assign><Assign.To><OutArgument x:TypeArguments="x:String">[TFSBuildExeOutput]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[stdOutput]</InArgument></Assign.Value></Assign></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[TFSBuildExeOutput.ToString().Contains(&quot;Succeeded&quot;)]" DisplayName="Check if Queued Build Status is Succeeded"><If.Then><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[&quot;Downstream build &quot; + &quot;&quot;&quot;&quot; + DownstreamBuildDefinitionTeamProject + &quot;\&quot; + DownstreamBuildDefn.Name + &quot;&quot;&quot;&quot; + &quot; completed successfully&quot;]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></If.Then><If.Else><Throw DisplayName="Throw - Downstream Build Failed" Exception="[New Exception(&quot;Downstream build &quot; + &quot;&quot;&quot;&quot; + DownstreamBuildDefinitionTeamProject + &quot;\&quot; + DownstreamBuildDefn.Name + &quot;&quot;&quot;&quot; + &quot;has FAILED!&quot;)]" /></If.Else></If></Sequence></ActivityAction></ForEach></If.Else></If></Sequence></If.Then></If></Sequence> <If Condition="[UnitTestsCheck]" DisplayName="Check if UnitTestsCheck flag is set to true"><If.Then><Sequence DisplayName="Successful Build Completion Activities"><Sequence.Variables><Variable x:TypeArguments="scg:List(sds:SqlParameter)" Default="[New List(Of Data.SqlClient.SqlParameter)]" Name="SqlParameters" /></Sequence.Variables><Sequence DisplayName="Insert data into team build portal"><Sequence.Variables><Variable x:TypeArguments="scg:List(sds:SqlParameter)" Default="[New List(Of SqlParameter)]" Name="SqlParameters" /></Sequence.Variables><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add ProjectName To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@ProjectName&quot;, BuildDetail.TeamProject)]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add ProjectName To BuildDefintion" Item="[New Data.SqlClient.SqlParameter(&quot;@BuildDefinition&quot;, BuildDetail.BuildDefinition.Name)]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add StyleCopViolations To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@StyleCopViolations&quot;, TotalStylecopViolationsCount)]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add FxCopViolations To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@FxCopViolations&quot;, TotalFxCopErrorsCount.ToString())]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add FxCopCriticalViolations To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@FxCopViolations_Critical&quot;, TotalFxCopCriticalErrorsCount.ToString())]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add FxCopViolationFilesTo SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@FxCopViolations_Files&quot;, DropLocation + &quot;\FxCopResults&quot;)]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add DigitalCodeSigning To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@DigitalCodeSigning&quot;, DigitalCodeSignAll.ToString())]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add FortifyScan To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@FortifyScan&quot;, canFortify.ToString())]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add NugetPackaging To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@NugetPackaging&quot;, GenerateNuget.ToString())]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add StrongNaming To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@StrongNaming&quot;, StrongNaming.ToString())]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add AutomatedTests To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@AutomatedTests&quot;, DisableTests.ToString())]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add CodeAnalysis To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@CodeAnalysis&quot;, RunCodeAnalysis.ToString())]" /><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add ThirdPartyCodeSigning To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@ThirdPartyDigitalcodeSign&quot;, ThirdPartyDigitalSignExists.ToString())]" /><If Condition="[StrongNaming And ThirdPartyStrongNameExists]" DisplayName="Check If Strong Naming and Third Party Strong Naming are true"><If.Then><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add ThirdPartyStrongNaming To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@ThirdPartyStrongNaming&quot;, &quot;true&quot;)]" /></If.Then><If.Else><AddToCollection x:TypeArguments="sds:SqlParameter" Collection="[SqlParameters]" DisplayName="Add ThirdPartyStrongNaming To SqlParameters" Item="[New Data.SqlClient.SqlParameter(&quot;@ThirdPartyStrongNaming&quot;, &quot;false&quot;)]" /></If.Else></If><If Condition="[2 &gt; 1]"><If.Then><s8:SqlCommandsExecution CmdType="[SqlCommandtype.StoredProcedure]" Database="Build_Team_Portal" DisplayName="Insert Build Data into Build Team Portal" Password="Allscripts#1" Server="ambuildserver1" SqlParameters="[SqlParameters]" SqlQuery="uspInsertBuildDetails" UserID="sa" /></If.Then><If.Else><s8:SqlCommandsExecution CmdType="{x:Null}" SqlParameters="{x:Null}" Database="Build_Team_Portal" DisplayName="Insert Build Data into Build Team Portal" Password="Allscripts#1" Server="ambuildserver1" SqlQuery="[&quot;INSERT INTO [dbo].[BuildMatrix] (ProjectName, BuildDefinition, StyleCopViolations, FxCopViolations, FxCopViolations_Critical, FxCopViolations_Files, DigitalCodeSigning)&quot; +&#xA;&quot;VALUES ('&quot; + BuildDetail.TeamProject + &quot;', '&quot; +&#xA;BuildDetail.BuildDefinition.Name + &quot;', &quot; +&#xA;TotalStylecopViolationsCount.ToString + &quot;, '&quot; +&#xA;TotalFxCopErrorsCount.ToString() + &quot;', '&quot; +&#xA;TotalFxCopCriticalErrorsCount.ToString + &quot;', '&quot; +&#xA;DropLocation + &quot;\FxCopResults&quot; + &quot;', '&quot; +&#xA;DigitalCodeSignAll.ToString() +&#xA;&quot;')&quot;]" UserID="sa" /></If.Else></If></Sequence><TryCatch DisplayName="Insert Build Data into Release Portal Database"><TryCatch.Try><If Condition="[Build_Type = BuildType.Release]" DisplayName="Check if Build Type is Release"><If.Then><u:UpdateReleaseBuildPortal BuildDefinitions="[BuildDetail.BuildDefinition.Name]" BuildNumber="[BuildVersion]" Database="BuildInformationPortal" InstallersPath="[DropLocation + &quot;\Installers&quot;]" LogsPath="[DropLocation + &quot;\logs&quot;]" NugetPackagesPath="[DropLocation + &quot;\NugetPkgs&quot;]" ProjectName="[BuildDetail.TeamProject]" ReleasePath="[DropLocation + &quot;\Release&quot;]" SandcastleDocsPath="[DropLocation + &quot;\SandcastleDocs&quot;]" Server="AMBUILDSERVER1" StylecopResultsPath="[DropLocation + &quot;\StylecopResults&quot;]" /></If.Then></If></TryCatch.Try><TryCatch.Catches><Catch x:TypeArguments="s:Exception"><ActivityAction x:TypeArguments="s:Exception"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="s:Exception" Name="exception" /></ActivityAction.Argument></ActivityAction></Catch></TryCatch.Catches></TryCatch><mtbwa:InvokeProcess Arguments="[TfsCollection.ToString() + &quot; &quot; + &quot;&quot;&quot;&quot; + BuildDetail.TeamProject + &quot;&quot;&quot;&quot; + &quot; &quot; + &quot;&quot;&quot;&quot; + BuildDetail.BuildDefinition.Name + &quot;&quot;&quot;&quot;]" DisplayName="Run CheckWorkspaceMapping Utility" FileName="C:\SOFTWARE\CheckWorkspaceMapping\CheckWorkspaceMapping.exe" Result="[WorkspaceMappingCheckExitCode]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><Throw Exception="[New Exception(errOutput)]" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess><If Condition="[WorkspaceMappingCheckExitCode = 0]" DisplayName="Check WorkspaceMappingCheckExitCode" /><If Condition="[CreateLabel]" DisplayName="Apply Label for successful builds" mtbwt1:BuildTrackingParticipant.Importance="Low"><If.Then><mtbwa:InvokeForReason DisplayName="Create and Set Label for non-Shelveset Builds" Reason="Manual, IndividualCI, BatchedCI, Schedule, ScheduleForced, UserCreated"><mtbwa:InvokeProcess Arguments="[&quot;label /delete &quot; + BuildDetail.BuildNumber + &quot; /collection:&quot; + &quot;&quot;&quot;&quot; + BuildDetail.BuildServer.TeamProjectCollection.Uri.ToString + &quot;&quot;&quot;&quot;]" DisplayName="Delete label applied at the beginning of the build" FileName="[&quot;&quot;&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\IDE\tf.exe&quot;&quot;&quot;]"><mtbwa:InvokeProcess.ErrorDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="errOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[errOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.ErrorDataReceived><mtbwa:InvokeProcess.OutputDataReceived><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="stdOutput" /></ActivityAction.Argument><mtbwa:WriteBuildMessage Importance="[Microsoft.TeamFoundation.Build.Client.BuildMessageImportance.High]" Message="[stdOutput]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" /></ActivityAction></mtbwa:InvokeProcess.OutputDataReceived></mtbwa:InvokeProcess> <mtbwa:LabelWorkspace Comment="[&quot;Label Created by Team Build&quot;]" DisplayName="Create Label - Will be used by associate changesets and work items and for applying label at the end for successful builds" Name="[BuildDetail.BuildNumber + &quot;-Successful&quot;]" Scope="[String.Format(&quot;$/{0}&quot;, BuildDetail.BuildDefinition.TeamProject)]" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces" Workspace="[Workspace]" /> <mtbwa:InvokeForReason DisplayName="Set Label for non-Shelveset Builds" Reason="Manual, IndividualCI, BatchedCI, Schedule, ScheduleForced, UserCreated"><mtbwa:SetBuildProperties DisplayName="Set Label on BuildDetail" mtbwt1:BuildTrackingParticipant.Importance="Low" LabelName="[String.Format(&quot;{0}-Successful@$/{1}&quot;, BuildDetail.BuildNumber, BuildDetail.BuildDefinition.TeamProject)]" PropertiesToSet="LabelName" /></mtbwa:InvokeForReason></mtbwa:InvokeForReason></If.Then></If></Sequence></If.Then></If> <mtbwa:InvokeForReason DisplayName="Check In Gated Changes for CheckInShelveset Builds" Reason="CheckInShelveset"><mtbwa:CheckInGatedChanges DisplayName="Check In Gated Changes" Result="[FinalChangeset]" /> <InvokeMethod MethodName="Insert"><InvokeMethod.TargetObject><InArgument x:TypeArguments="scg:IList(mtvc:Changeset)">[TempAssociatedChangesets]</InArgument></InvokeMethod.TargetObject><InArgument x:TypeArguments="x:Int32">[TempAssociatedChangesets.Count]</InArgument><InArgument x:TypeArguments="mtvc:Changeset">[FinalChangeset]</InArgument></InvokeMethod></mtbwa:InvokeForReason> <If Condition="[CheckinNotification AndAlso Not (BranchForCheckinNotification Is Nothing)]" DisplayName="Check if CheckinNotification is true and BranchForCheckinNotification is not NULL"><If.Then><Sequence><Sequence.Variables><Variable x:TypeArguments="mtvc:Changeset" Name="tempChangeset" /><Variable x:TypeArguments="x:Int32" Default="1" Name="FileCheckedinCounter" /><Variable x:TypeArguments="scg:IEnumerable(x:String)" Name="ChangesetFiles" /></Sequence.Variables><tat:GetChangeset FailBuildOnError="{x:Null}" IgnoreExceptions="{x:Null}" TreatWarningsAsErrors="{x:Null}" Changeset="[tempChangeset]" ChangesetId="[Integer.Parse(BuildDetail.SourceGetVersion.Replace(&quot;C&quot;, &quot;&quot;))]" LogExceptionStack="True" VersionControlServer="[DirectCast(BuildDetail.BuildServer.TeamProjectCollection.GetService(Of VersionControlServer)(), VersionControlServer)]" /><tat:GetChangesetItems IgnoreExceptions="{x:Null}" TreatWarningsAsErrors="{x:Null}" Changeset="[tempChangeset]" ChangesetItems="[ChangesetFiles]" FailBuildOnError="False" LogExceptionStack="True" /><ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[ChangesetFiles]"><ActivityAction x:TypeArguments="x:String"><ActivityAction.Argument><DelegateInArgument x:TypeArguments="x:String" Name="item" /></ActivityAction.Argument><Sequence><Sequence.Variables><Variable x:TypeArguments="x:String" Name="FilesListRequiringCheckinNotification"><Variable.Default><Literal x:TypeArguments="x:String" Value="" /></Variable.Default></Variable></Sequence.Variables><If Condition="[item.ToUpper.StartsWith(BranchForCheckinNotification.ToUpper)]"><If.Then><Assign><Assign.To><OutArgument x:TypeArguments="x:String">[FilesListRequiringCheckinNotification]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:String">[FilesListRequiringCheckinNotification + "&lt;br /&gt;" + FileCheckedinCounter.ToString + ". " + item]</InArgument></Assign.Value></Assign></If.Then></If><Assign><Assign.To><OutArgument x:TypeArguments="x:Int32">[FileCheckedinCounter]</OutArgument></Assign.To><Assign.Value><InArgument x:TypeArguments="x:Int32">[FileCheckedinCounter + 1]</InArgument></Assign.Value></Assign></Sequence></ActivityAction></ForEach><tac:Email Attachments="{x:Null}" EnableSsl="{x:Null}" IgnoreExceptions="{x:Null}" Port="{x:Null}" Priority="{x:Null}" TreatWarningsAsErrors="{x:Null}" UseDefaultCredentials="{x:Null}" UserName="{x:Null}" UserPassword="{x:Null}" Action="Send" Body="[&quot;Files checked in are: &lt;br /&gt; &quot; +&#xA;FilesListRequiringCheckinNotification]" DisplayName="Send Email" FailBuildOnError="False" Format="HTML" LogExceptionStack="True" MailFrom="[EmailFrom]" MailTo="[EmailTo]" SmtpServer="[SmtpServer]" Subject="[String.Format(&quot;{0} TFS Checkin Notification&quot;, BuildDetail.BuildNumber)]" /></Sequence></If.Then></If> <If Condition="[SendEmail]" DisplayName="Check if Build Completion E-Mail is Required to be Sent"><If.Then><Sequence DisplayName="Build Completion Email"><local:BuildActivity BuildAssociatedChangesets="[TempAssociatedChangesets]" BuildDetail="[BuildDetail]" DisplayName="Generate Email Body" DropLocation="[DropLocation]" EmailTemplate="[EmailTemplate]" GenericTestReport="[GenericReportFile]" SilverlightTestReport="[DropLocation + BinariesDirSubFolder + TestResultFile + &quot;.htm&quot;]" StylecopResult="[BuildDetail.DropLocation + &quot;\StylecopResults&quot;]" /><tac:Email Attachments="{x:Null}" EnableSsl="{x:Null}" Format="{x:Null}" IgnoreExceptions="{x:Null}" Port="{x:Null}" Priority="{x:Null}" TreatWarningsAsErrors="{x:Null}" UseDefaultCredentials="{x:Null}" UserName="{x:Null}" UserPassword="{x:Null}" Action="Send" Body="[BuildActivity.EmailBody]" DisplayName="Send Email" FailBuildOnError="False" LogExceptionStack="True" MailFrom="[EmailFrom]" MailTo="[EmailTo]" SmtpServer="[SmtpServer]" Subject="[String.Format(&quot;{0} build has completed successfully&quot;, BuildDetail.BuildNumber)]" /></Sequence></If.Then></If></mtbwa:AgentScope>
      <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
    </Sequence>
  </this:Process.Implementation>
</this:Process>